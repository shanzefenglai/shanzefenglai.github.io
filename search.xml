<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Comparator比较器</title>
    <url>/posts/61305.html</url>
    <content><![CDATA[<p>通过Comparator比较器实现将List先按照给定的名单顺序排序，再按照时间顺序排序。<br>
理解Compare函数的返回值：不排序</p>
<ul>
<li>return 0: 不交换位置，</li>
<li>return 1: 交换位置</li>
<li>return -1: 不交换位置</li>
<li>return o1-o2: 升序排序</li>
<li>retrun o2-o1 : 降序排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] str1 = &#123;</span><br><span class="line">    <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;钱七&quot;</span>,</span><br><span class="line">    <span class="string">&quot;赵六&quot;</span>,</span><br><span class="line">    <span class="string">&quot;王五&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">List &lt; Comment &gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Comment</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comment</span>();</span><br><span class="line">c1.setDealname(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">c1.setDealtime(sdf.parse(<span class="string">&quot;2023-06-27 10:00:00&quot;</span>));</span><br><span class="line"><span class="type">Comment</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comment</span>();</span><br><span class="line">c2.setDealname(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">c2.setDealtime(sdf.parse(<span class="string">&quot;2023-06-27 16:03:00&quot;</span>));</span><br><span class="line"><span class="type">Comment</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comment</span>();</span><br><span class="line">c3.setDealname(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">c3.setDealtime(sdf.parse(<span class="string">&quot;2023-06-24 17:05:00&quot;</span>));</span><br><span class="line"><span class="type">Comment</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comment</span>();</span><br><span class="line">c4.setDealname(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">c4.setDealtime(sdf.parse(<span class="string">&quot;2023-06-27 10:00:00&quot;</span>));</span><br><span class="line"><span class="type">Comment</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comment</span>();</span><br><span class="line">c5.setDealname(<span class="string">&quot;钱七&quot;</span>);</span><br><span class="line">c5.setDealtime(sdf.parse(<span class="string">&quot;2023-06-26 09:21:00&quot;</span>));</span><br><span class="line"><span class="type">Comment</span> <span class="variable">c6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comment</span>();</span><br><span class="line">c6.setDealname(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">c6.setDealtime(sdf.parse(<span class="string">&quot;2023-06-26 09:21:00&quot;</span>));</span><br><span class="line"><span class="type">Comment</span> <span class="variable">c7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comment</span>();</span><br><span class="line">c7.setDealname(<span class="string">&quot;孙八&quot;</span>);</span><br><span class="line">c7.setDealtime(sdf.parse(<span class="string">&quot;2023-06-26 09:21:00&quot;</span>));</span><br><span class="line"></span><br><span class="line">list.add(c1);</span><br><span class="line">list.add(c7);</span><br><span class="line">list.add(c2);</span><br><span class="line"></span><br><span class="line">list.add(c3);</span><br><span class="line">list.add(c4);</span><br><span class="line">list.add(c5);</span><br><span class="line">list.add(c6);</span><br><span class="line"><span class="comment">// 使用自定义的比较器来排序</span></span><br><span class="line">Comparator &lt; Comment &gt; commentComparator = <span class="keyword">new</span> <span class="title class_">Comparator</span> &lt; Comment &gt; () &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Comment o1, Comment o2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> Arrays.asList(str1).indexOf(o1.getDealname());</span><br><span class="line">        <span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> Arrays.asList(str1).indexOf(o2.getDealname());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index1 != -<span class="number">1</span> &amp;&amp; index2 != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果两个 Comment 的 dealName 都在 orderArray 中</span></span><br><span class="line">            <span class="keyword">if</span> (index1 == index2) &#123;</span><br><span class="line">                System.out.println(o2.getDealtime().compareTo(o1.getDealtime()));</span><br><span class="line">                <span class="comment">// 如果 dealName 相同，按照 dealTime 进行排序</span></span><br><span class="line">                <span class="keyword">return</span> o2.getDealtime().compareTo(o1.getDealtime());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则按照 orderArray 中的顺序进行排序</span></span><br><span class="line">                <span class="keyword">return</span> Integer.compare(index1, index2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index1 != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果只有 o1 的 dealName 在 orderArray 中</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index2 != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果只有 o2 的 dealName 在 orderArray 中</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(o2.getDealtime().compareTo(o1.getDealtime()));</span><br><span class="line">            <span class="comment">// 如果两个 Comment 的 dealName 都不在 orderArray 中，则按照 dealTime 进行排序</span></span><br><span class="line">            <span class="keyword">return</span> o2.getDealtime().compareTo(o1.getDealtime());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">list.sort(commentComparator);</span><br><span class="line">System.out.println(JSONObject.toJSONString(list));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NexT主题中添加gitalk评论系统</title>
    <url>/posts/53236.html</url>
    <content><![CDATA[<p>参考了这个教程<a href="https://asdfv1929.github.io/2018/01/20/gitalk/">https://asdfv1929.github.io/2018/01/20/gitalk/</a></p>
<h1>Register Application</h1>
<p>在GitHub上注册新应用，链接：<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a><br>
注册完成后，会有Client ID 和Client Secret</p>
<h1>配置主题_config.yml文件</h1>
<p>最新版的NexT主题已经集成了gitalk的功能，所以注册完应用后直接修改配置文件就可以了。</p>
<img src="/posts/53236/gitalk%E9%85%8D%E7%BD%AE.jpg" class="" title="This is an image">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>时间函数epoch、extract和窗口函数lag</title>
    <url>/posts/41503.html</url>
    <content><![CDATA[<div class="note info simple"><p>业务背景：<br>
表jlb记录了人员从门禁点位进出的时间，人员从门禁点位先出后进为溜号，查询溜号时间在1分钟内的记录。<br>
sign字段0表示出，1表示进。</p>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> cte <span class="keyword">AS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> empname,idcard,jcsj,sign,entrypoint,</span><br><span class="line"><span class="built_in">LAG</span>(sign) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> empname,idcard <span class="keyword">ORDER</span> <span class="keyword">BY</span> jcsj) <span class="keyword">AS</span> prev_sign,</span><br><span class="line"><span class="built_in">LAG</span>(jcsj) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> empname,idcard <span class="keyword">ORDER</span> <span class="keyword">BY</span> jcsj) <span class="keyword">AS</span> prev_jcsj,</span><br><span class="line"><span class="built_in">LAG</span>(entrypoint) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> empname, idcard <span class="keyword">ORDER</span> <span class="keyword">BY</span> jcsj) <span class="keyword">AS</span> prev_entrypoint</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> t1.jlb_name <span class="keyword">AS</span> empname,t1.jlb_sfzh <span class="keyword">AS</span> idcard, t1.jlb_ryjcsj  <span class="keyword">AS</span> jcsj,door.sign <span class="keyword">AS</span> sign, </span><br><span class="line">t1.jlb_doorname <span class="keyword">AS</span> entrypoint</span><br><span class="line"><span class="keyword">FROM</span> jlb t1)t </span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> empname <span class="keyword">AS</span> 姓名,idcard <span class="keyword">AS</span> 身份证号,<span class="built_in">EXTRACT</span> (epoch <span class="keyword">FROM</span> (to_timestamp(jcsj, <span class="string">&#x27;yyyy-mm-dd HH24:MI:SS&#x27;</span>)<span class="operator">-</span> to_timestamp(prev_jcsj, <span class="string">&#x27;yyyy-mm-dd HH24:MI:SS&#x27;</span>)) )<span class="keyword">AS</span> 溜号时间, </span><br><span class="line">entrypoint <span class="keyword">AS</span> 入口点位,jcsj <span class="keyword">AS</span> 进门时间,prev_entrypoint <span class="keyword">AS</span> 出口点位, prev_jcsj <span class="keyword">AS</span> 出门时间</span><br><span class="line"><span class="keyword">FROM</span> cte</span><br><span class="line"><span class="keyword">WHERE</span> sign <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> prev_sign <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span> 溜号时间<span class="operator">&lt;=</span><span class="number">60</span> <span class="keyword">AND</span> 溜号时间<span class="operator">&gt;</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h1>lag函数</h1>
<p>返回来自当前行所在的分区内当前行之前的N行的值</p>
<h2 id="语法">语法</h2>
<p><code>lag(expr, offset, [,default]) over ([partition by partition_column_list] [order by order_column_list])</code></p>
<p><code>expr</code><br>
必须的，它可以是一个列名或者表达式</p>
<p><code>offset</code><br>
可选的，相对于当前行的偏移的行数，默认值为1</p>
<p><code>default</code><br>
可选的，它可以是一个列名或者表达式</p>
<p><code>partition_column_list</code><br>
参与分区的列的列表</p>
<p><code>order_column_list</code><br>
参与排序的列的列表</p>
<h1>extract函数</h1>
<p>extract函数用于从一个日期或者时间型的字段中抽取年、月、日、时、分、秒数据。</p>
<h2 id="语法-2">语法</h2>
<p><code>extract ([unit] from [date])</code></p>
<p><code>date</code><br>
合法的日期表达式</p>
<p><code>unit</code><br>
参数值（部分）：</p>
<table>
<thead>
<tr>
<th>unit值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>MICROSECONF</td>
<td>毫秒</td>
</tr>
<tr>
<td>SECOND</td>
<td>秒</td>
</tr>
<tr>
<td>MINUTE</td>
<td>分</td>
</tr>
<tr>
<td>HOUR</td>
<td>时</td>
</tr>
<tr>
<td>DAY</td>
<td>天</td>
</tr>
<tr>
<td>WEEK</td>
<td>周</td>
</tr>
<tr>
<td>MONTH</td>
<td>月</td>
</tr>
<tr>
<td>QUARTER</td>
<td>季度</td>
</tr>
<tr>
<td>YEAR</td>
<td>年</td>
</tr>
</tbody>
</table>
<h2 id="更多示例">更多示例</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">extract</span>(<span class="keyword">second</span> <span class="keyword">from</span> to_timestamp(<span class="string">&#x27;2021-08-19 08:54:09.549&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd HH24:MI:SS&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h1>epoch函数</h1>
<p>对于日期和时间戳类型的值，会获取从<code>1970-01-01 00:00:00 UTC</code>这个Linux纪元年的开始时间到给定的日期或者时间戳参数的时间之间相隔的秒数。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>fiddler修改请求</title>
    <url>/posts/60523.html</url>
    <content><![CDATA[<p>业务系统中发现功能问题，通过F12工具查看后，发现某个请求状态码是403并且请求方法是OPTIONS.</p>
<img src="/posts/60523/400%E8%AF%B7%E6%B1%82.png" class="" title="This is an image">
<span id="more"></span>
<p>此种情况下，判断可能是没有指定请求方式的问题导致403，用fiddler进行抓包，抓到这个403请求，右键选择replay-&gt;reissue and edit</p>
<img src="/posts/60523/fiddler%E4%BF%AE%E6%94%B9.png" class="" title="This is an image">
<p>将请求方式修改为GET,并点击run to completion</p>
<img src="/posts/60523/fiddler%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82.png" class="" title="This is an image">
<img src="/posts/60523/fiddler%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C.png" class="" title="This is an image">
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title>go创建变量的方法</title>
    <url>/posts/43395.html</url>
    <content><![CDATA[<h1>创建变量的方法</h1>
<h2 id="一行声明一个变量">一行声明一个变量</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 变量名 类型</span></span><br><span class="line"><span class="keyword">var</span> &lt;name&gt; &lt;<span class="keyword">type</span>&gt;</span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;这是一个变量&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="多个变量一起声明">多个变量一起声明</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">    gender <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="声明和初始化一个变量">声明和初始化一个变量</h2>
<p><code>：= </code>推导式声明写法或者短类型声明法：编译器自动根据右值类型推断出对应的变量类型，使用限制为：只能用于函数内部</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := <span class="string">&quot;这是一个变量&quot;</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;这是一个变量&quot;</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;这是一个变量&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="声明和初始化多个变量">声明和初始化多个变量</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name, age := <span class="string">&quot;变量1&quot;</span>, <span class="number">20</span></span><br></pre></td></tr></table></figure>
<h2 id="声明一个指针变量">声明一个指针变量</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="type">int</span> = <span class="number">23</span></span><br><span class="line"><span class="keyword">var</span> ptr = &amp;age <span class="comment">// &amp;后接变量名，表示去除该变量的内存地址</span></span><br><span class="line"></span><br><span class="line">ptr := <span class="built_in">new</span>(<span class="type">int</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;ptr address&quot;</span>, ptr)</span><br><span class="line">fmt.Println(<span class="string">&quot;ptr value&quot;</span>, *ptr) <span class="comment">// * 后接指针变量，表示从内存中地址中取出值</span></span><br></pre></td></tr></table></figure>
<p>new(int) 创建一个类型为int的匿名变量，初始化为int类型的零值， 返回变量的地址，返回的指针类型为*int<br>
匿名变量（占位符、空白标识符）用下划线表示，优点是：</p>
<ul>
<li>不分配内存，不占用内存空间</li>
<li>不需要命名无用的变量名</li>
<li>可以多次声明</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go接口和多态</title>
    <url>/posts/45128.html</url>
    <content><![CDATA[<p>go语言中通过接口实现多态</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/shopspring/decimal&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义一个接口</span></span><br><span class="line"><span class="keyword">type</span> Good <span class="keyword">interface</span> &#123;</span><br><span class="line">	settleAccount() decimal.Decimal</span><br><span class="line">	orderInfo() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个结构体</span></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line">	name     <span class="type">string</span></span><br><span class="line">	quantity <span class="type">int64</span></span><br><span class="line">	price    decimal.Decimal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FreeGift <span class="keyword">struct</span> &#123;</span><br><span class="line">	name     <span class="type">string</span></span><br><span class="line">	quantity <span class="type">int64</span></span><br><span class="line">	price    decimal.Decimal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体实现接口的两个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(phone Phone)</span></span> settleAccount() decimal.Decimal &#123;</span><br><span class="line">	<span class="keyword">return</span> decimal.NewFromInt(phone.quantity).Mul(phone.price)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(phone Phone)</span></span> orderInfo() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;购买&quot;</span> + strconv.FormatInt(phone.quantity, <span class="number">8</span>) + <span class="string">&quot;个&quot;</span> + phone.name + <span class="string">&quot;， 共&quot;</span> + phone.settleAccount().String() + <span class="string">&quot;元&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(gift FreeGift)</span></span> settleAccount() decimal.Decimal &#123;</span><br><span class="line">	<span class="keyword">return</span> decimal.Zero</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(gift FreeGift)</span></span> orderInfo() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;购买&quot;</span> + strconv.FormatInt(gift.quantity, <span class="number">8</span>) + <span class="string">&quot;个&quot;</span> + gift.name + <span class="string">&quot;， 共&quot;</span> + gift.settleAccount().String() + <span class="string">&quot;元&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算金额</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateAmount</span><span class="params">(goods []Good)</span></span> decimal.Decimal &#123;</span><br><span class="line">	<span class="keyword">var</span> amount decimal.Decimal = decimal.Zero</span><br><span class="line">	<span class="keyword">for</span> _, good := <span class="keyword">range</span> goods &#123;</span><br><span class="line">		fmt.Println(good.orderInfo())</span><br><span class="line">		amount = amount.Add(good.settleAccount())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> amount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	phoneAmount, _ := decimal.NewFromString(<span class="string">&quot;3499.00&quot;</span>)</span><br><span class="line">	phone := Phone&#123;</span><br><span class="line">		name:     <span class="string">&quot;huawei手机&quot;</span>,</span><br><span class="line">		quantity: <span class="number">1</span>,</span><br><span class="line">		price:    phoneAmount,</span><br><span class="line">	&#125;</span><br><span class="line">	giftAmount, _ := decimal.NewFromString(<span class="string">&quot;0.00&quot;</span>)</span><br><span class="line">	gift := FreeGift&#123;</span><br><span class="line">		name:     <span class="string">&quot;耳机&quot;</span>,</span><br><span class="line">		quantity: <span class="number">1</span>,</span><br><span class="line">		price:    giftAmount,</span><br><span class="line">	&#125;</span><br><span class="line">	goods := []Good&#123;phone, gift&#125;</span><br><span class="line">	allAmount := calculateAmount(goods)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;总金额为%s元&quot;</span>, allAmount.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go数据类型</title>
    <url>/posts/43394.html</url>
    <content><![CDATA[<h1>整型</h1>
<table>
<thead>
<tr>
<th>种类</th>
<th>符号</th>
<th>数据类型</th>
<th>类型宽度(bit)</th>
<th>类型宽度(byte)</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>有</td>
<td>int</td>
<td>32或64</td>
<td>4或8</td>
</tr>
<tr>
<td>int</td>
<td>有</td>
<td>int8</td>
<td>8</td>
<td>1</td>
</tr>
<tr>
<td>int</td>
<td>有</td>
<td>int16</td>
<td>16</td>
<td>2</td>
</tr>
<tr>
<td>int</td>
<td>有</td>
<td>int32</td>
<td>32</td>
<td>4</td>
</tr>
<tr>
<td>int</td>
<td>有</td>
<td>int64</td>
<td>64</td>
<td>8</td>
</tr>
<tr>
<td>uint</td>
<td>无</td>
<td>uint</td>
<td>32或64</td>
<td>4或8</td>
</tr>
<tr>
<td>uint</td>
<td>无</td>
<td>uint8</td>
<td>8</td>
<td>1</td>
</tr>
<tr>
<td>uint</td>
<td>无</td>
<td>uint16</td>
<td>16</td>
<td>2</td>
</tr>
<tr>
<td>uint</td>
<td>无</td>
<td>uint32</td>
<td>32</td>
<td>4</td>
</tr>
<tr>
<td>uint</td>
<td>无</td>
<td>uint64</td>
<td>64</td>
<td>8</td>
</tr>
</tbody>
</table>
<p>以int8和uint8为例，8表示8个bit，能表示的数值格式为2^8=256个，而uint为无符号，能表示的范围为0-255，int为有符号，能表示的范围为-128~127。</p>
<h1>浮点型</h1>
<p>浮点数类型的值由整数部分、小数点和小数部分组成，整数部分和小数部分均由10进制表示法表示。<br>
有两种精度的浮点数float32和float64，使用时需要注意精度的问题。</p>
<ul>
<li>float32<br>
存储占用4个字节（32位），1位用来表示符号，8位用来指数，23位表示尾数</li>
<li>float64<br>
存储占用8个字节（64位），1位用来表示符号，11位用来指数，52位表示尾数</li>
</ul>
<h1>byte</h1>
<p>占用1个字节，表示范围为0~255，表示的是ACSII表中的一个字符。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">byte</span> = <span class="number">65</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">byte</span> = <span class="string">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>
<p>a和b输出后结果都是A</p>
<h1>rune</h1>
<p>byte类型表示的值是有限的，如果想表示中文，只能使用rune类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="type">rune</span> = <span class="string">&#x27;张&#x27;</span></span><br></pre></td></tr></table></figure>
<h1>字符串</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr <span class="type">string</span> = <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果字符串中有<code>\</code>转义字符，可以使用两种方式表示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解释型表示法</span></span><br><span class="line"><span class="keyword">var</span> mystr1 <span class="type">string</span> = <span class="string">&quot;\\r\\n&quot;</span></span><br><span class="line"><span class="comment">// 原生型表示法</span></span><br><span class="line"><span class="keyword">var</span> mystr2 <span class="type">string</span> = <span class="string">`\r\n`</span></span><br></pre></td></tr></table></figure>
<p>反引号可以不写换行符来表示一个多行的字符串。</p>
<h1>数组</h1>
<p>由固定长度的元素组成的序列，声明数组的方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line">arr3 := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<h1>切片</h1>
<p>切片将数组作为底层的数据结构。与数组不同的是，无法通过切片类型来确定切片的长度。<br>
切片的构造方式：</p>
<ol>
<li>对数组进行截取</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 从索引1开始，截取到索引2</span></span><br><span class="line">sli1 := arr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">// 从索引1开始，截取到索引2</span></span><br><span class="line">sli2 := arr[<span class="number">1</span>:<span class="number">3</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>sli1和sli2的区别是容量不同，在切片时，如果不指定第三个数，切片终止索引会一直到原数组的最后一个数。<br>
sli1的长度为2， 容量为4，sli2的长度为2， 容量为3。</p>
<ol>
<li>直接声明</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个字符串切片</span></span><br><span class="line"><span class="keyword">var</span> strList []<span class="type">string</span></span><br><span class="line"><span class="comment">// 声明一个整型切片</span></span><br><span class="line"><span class="keyword">var</span> numList []<span class="type">int</span></span><br><span class="line"><span class="comment">// 声明一个整型切片并初始化</span></span><br><span class="line"><span class="keyword">var</span> numListEmpty = []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 声明一个切片并初始化</span></span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">4</span>:<span class="number">2</span>&#125; <span class="comment">// 索引为4的值为2，其余位置为零值</span></span><br></pre></td></tr></table></figure>
<ol>
<li>使用make函数赋值<br>
格式为：</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T: 类型，size:长度, cap: 容量</span></span><br><span class="line"><span class="built_in">make</span>([]T, size, <span class="built_in">cap</span>)</span><br></pre></td></tr></table></figure>
<p>例子：<code>make([]int, 2, 10)</code></p>
<p>要判断一个切片是否为空，使用<code>len(s)==0</code>来判断，不应该使用<code>s==nil</code>来判断。</p>
<p>切片拷贝后，对一个切片的修改会影响另一个切片的内容：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>) <span class="comment">// [0 0 0]</span></span><br><span class="line">    s2 := s1</span><br><span class="line">    s2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Println(s1) <span class="comment">// [100 0 0]</span></span><br><span class="line">    fmt.Println(s2) <span class="comment">// [100 0 0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用append()方法为切片添加元素：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">    s = <span class="built_in">append</span>(s,<span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line">    s = <span class="built_in">append</span>(s,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">// [1 2 3 4]</span></span><br><span class="line">    s2 := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">    s = <span class="built_in">append</span>(s, s2...) <span class="comment">// [1 2 3 4 5 6 7]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>字典</h1>
<p>声明并初始化字典的方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">var</span> scores <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> =  <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;english&quot;</span>: <span class="number">80</span>, <span class="string">&quot;chinese&quot;</span>: <span class="number">90</span>&#125;</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">scores := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;english&quot;</span>: <span class="number">80</span>, <span class="string">&quot;chinese&quot;</span>: <span class="number">90</span>&#125;</span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line">scores := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">scores[<span class="string">&quot;english&quot;</span>] = <span class="number">80</span></span><br><span class="line">scores[<span class="string">&quot;chinese&quot;</span>] = <span class="number">70</span></span><br></pre></td></tr></table></figure>
<p>添加元素：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">scores[<span class="string">&quot;math&quot;</span>] = <span class="number">95</span></span><br></pre></td></tr></table></figure>
<p>更新元素：<br>
如果key已存在，直接更新value:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">scores[<span class="string">&quot;english&quot;</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>读取元素，直接使用<code>[key]</code>即可，如果key不存在，也不报错，会返回value-type的零值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(scores[<span class="string">&quot;math&quot;</span>])</span><br></pre></td></tr></table></figure>
<p>删除元素，使用delete函数，如果key不存在，delete函数会静默处理，不会报错：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delete</span>(score, <span class="string">&quot;math&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>判断key是否存在：<br>
字典的下标读取可以返回两个值，使用第二个返回值表示对应的key是否存在，若存在ok为true，不存在，则ok 为false</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    score := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;english&quot;</span>: <span class="number">80</span>, <span class="string">&quot;chinese&quot;</span>: <span class="number">85</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> math, ok := score[<span class="string">&quot;math&quot;</span>]; ok &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;math 的值是： %d&quot;</span>, math)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;math不存在&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历字典：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">scores := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;english&quot;</span>: <span class="number">80</span>, <span class="string">&quot;chinese&quot;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="comment">// 遍历key和value</span></span><br><span class="line"><span class="keyword">for</span> subject, score := <span class="keyword">range</span> scores &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;key:%s, value:%d\n&quot;</span>, subject, score)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历key</span></span><br><span class="line"><span class="keyword">for</span> subject := <span class="keyword">range</span> scores &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;key:%s\n&quot;</span>, subject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历value</span></span><br><span class="line"><span class="keyword">for</span> _,score := <span class="keyword">range</span> scores &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;value:%d\n&quot;</span>, score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>布尔类型</h1>
<p>布尔值为true和false,并且真值true和1不相等且无法进行比较，假值false与0无法比较。</p>
<h1>指针</h1>
<p>创建指针的方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定义对应的变量，再通过变量取得内存地址，创建指针</span></span><br><span class="line">aint := <span class="number">1</span></span><br><span class="line">ptr := &amp;aint</span><br><span class="line"><span class="comment">// 先创建指针，分配好内存后，再给指针指向的内存地址写入对应的值</span></span><br><span class="line">astr := <span class="built_in">new</span>(<span class="type">string</span>)</span><br><span class="line">*astr = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">// 先声明一个指针变量，再从其他变量取得内存地址赋值给她</span></span><br><span class="line">aint2 := <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> bint *<span class="type">int</span> <span class="comment">//声明一个指针</span></span><br><span class="line">bint = &amp;aint2</span><br></pre></td></tr></table></figure>
<h1>枚举</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个类型名为Sex，实际类型为int</span></span><br><span class="line"><span class="keyword">type</span> Sex <span class="type">int</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Woman Sex = <span class="literal">iota</span> <span class="comment">//将枚举值Woman定义为Sex类型，并使用iota生成枚举值，默认值为0</span></span><br><span class="line">Man</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>const 声明内的每一行常量声明，会自动套用前面的iota格式，并自动增加。</p>
<h1>列表</h1>
<p>list的初始化方法：</p>
<ul>
<li>通过container/list包中的New方法初始化list</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">变量名:= list.New()</span><br></pre></td></tr></table></figure>
<ul>
<li>通过声明初始化list</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 := list.List</span><br></pre></td></tr></table></figure>
<p>list的添加元素、删除元素、遍历：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	l := list.New()</span><br><span class="line">	<span class="comment">// 头部添加字符串</span></span><br><span class="line">	l.PushFront(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	<span class="comment">// 尾部添加字符串</span></span><br><span class="line">	l.PushBack(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">	<span class="comment">// 尾部添加一个整型， 并保持元素句柄</span></span><br><span class="line">	element := l.PushBack(<span class="number">1</span>)</span><br><span class="line">	<span class="comment">// 在element之后插入字符串2</span></span><br><span class="line">	l.InsertAfter(<span class="string">&quot;2&quot;</span>, element)</span><br><span class="line">	<span class="comment">// 在element之前插入字符串0</span></span><br><span class="line">	l.InsertBefore(<span class="string">&quot;0&quot;</span>, element)</span><br><span class="line">	<span class="comment">// 移除element</span></span><br><span class="line">	l.Remove(element)</span><br><span class="line">	<span class="comment">// 遍历list</span></span><br><span class="line">	<span class="keyword">for</span> i := l.Front(); i != <span class="literal">nil</span>; i = i.Next() &#123;</span><br><span class="line">		fmt.Println(i.Value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<pre><code>hello
world
0    
2  
</code></pre>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go流程控制</title>
    <url>/posts/54045.html</url>
    <content><![CDATA[<h1>if-else</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    age := <span class="number">20</span></span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">18</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;已经成年了&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> age &gt; <span class="number">12</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;已经是青少年了&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;还不是青少年&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>高级写法：<br>
if里允许先运行一个表达式，取得变量后，再对其进行判断：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> age := <span class="number">20</span>;age &gt; <span class="number">18</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;已经成年了&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>switch-case</h1>
<p>一个case可以有多个条件，但是case条件常量不能重复：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    month := <span class="number">2</span></span><br><span class="line">    <span class="keyword">switch</span> month &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;spring&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;sunmmer&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;autumn&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;winter&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch 后可接函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">(args ...<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _,i := <span class="keyword">range</span> args &#123;</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">60</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    chinese := <span class="number">80</span></span><br><span class="line">    english := <span class="number">50</span></span><br><span class="line">    math := <span class="number">70</span></span><br><span class="line">    <span class="keyword">switch</span> getResult(chinese, english, math) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;所有成绩都合格&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;有成绩不合格&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch后可不接表达式：<br>
当switch后不接任何东西时，switch-case相当于if-elseif-else</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">score := <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">95</span> &amp;&amp; score &lt;= <span class="number">100</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;良好&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;合格&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> score &gt;= <span class="number">0</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;不合格&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;输入有误...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<mark class="hl-label blue">fallthrough</mark> 穿透：直接执行下一个case并且不需要判断条件
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> s == <span class="string">&quot;hello&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> s == <span class="string">&quot;xxxx&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> s != <span class="string">&quot;world&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<pre><code>hello
xxxx
</code></pre>
<h1>for循环</h1>
<p>语句模型：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> [condition | (init; condition; increment) | Range ] &#123;</span><br><span class="line">    statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例1：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++ &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例2：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例3：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myarr := [...]<span class="type">string</span>&#123;<span class="string">&quot;work&quot;</span>, <span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> myarr &#123;</span><br><span class="line">    fmt.Println(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>goto</h1>
<p>语句模型：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> 标签</span><br><span class="line">···</span><br><span class="line">···</span><br><span class="line">标签： 表达式</span><br></pre></td></tr></table></figure>
<p>跳转到某一行执行代码，例用goto实现打印1到10的偶数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    flag: </span><br><span class="line">      <span class="keyword">for</span> i&lt;=<span class="number">10</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">              i++</span><br><span class="line">              <span class="keyword">goto</span> flag</span><br><span class="line">          &#125;</span><br><span class="line">          fmt.Println(i)</span><br><span class="line">          i++</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意： goto语句和标签之间不能有变量声明。</p>
<h1>defer</h1>
<p>defer后面跟一个函数的调用，可以实现将函数的调用延迟到当前函数执行完之后再执行。使用defer只是延迟调用函数，此时给传递函数里的变量，不应该受后续程序的影响。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    name := <span class="string">&quot;go&quot;</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(name)</span><br><span class="line">    </span><br><span class="line">    name = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<pre><code>hello
go
</code></pre>
<p>如果存在多个defer， defer的调用顺序和代码顺序相反。<br>
如果函数里有return, defer在return后调用。<br>
在实际应用中，defer可以用来关闭资源。</p>
<h1>select</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> [condition1]:</span><br><span class="line">        statement</span><br><span class="line">    <span class="keyword">case</span> [condidtion2]:</span><br><span class="line">        statement</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        statement</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>select-case是一种仅能用于channel发送和接收消息的语句。select在运行期间是阻塞的， 当select中没有case语句的时候，会阻塞当前goroutine</li>
<li>select专门用于检测多个channel是否准备完毕：可读可写</li>
<li>select语句中除default外，每个case操作个channel， 要么读要么写</li>
<li>select语句中除default外，各case的执行顺序是完全随机的</li>
<li>select中如果没有default，会阻塞等待任一case</li>
<li>select中读操作要判断是否成功读取，关闭的channel也可以读取</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go结构体</title>
    <url>/posts/57655.html</url>
    <content><![CDATA[<h1>结构体的定义</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> struct_variable_type <span class="keyword">struct</span> &#123;</span><br><span class="line">  member definition</span><br><span class="line">  ····</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>访问结构体成员</h1>
<p>使用<code>结构体.成员名</code>访问结构体中的成员，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">    title <span class="type">string</span></span><br><span class="line">    author <span class="type">string</span></span><br><span class="line">    book_id <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    book1 := Book &#123;</span><br><span class="line">        title: <span class="string">&quot;go语言&quot;</span>,</span><br><span class="line">        author: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        book_id: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;book 1 tiltle: %s\n&quot;</span>, book1.title)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>结构体指针</h1>
<p>定义结构体指针：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> struct_pointer *Books</span><br></pre></td></tr></table></figure>
<p>查看结构体变量的地址：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">struct_pointer</span> = &amp;Books</span><br></pre></td></tr></table></figure>
<p>使用结构体指针访问结构体成员：</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">struct_pointer.<span class="built_in">title</span></span><br></pre></td></tr></table></figure>
<h1>结构体组合</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> staff <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">    company</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> company <span class="keyword">struct</span> &#123;</span><br><span class="line">    companyName <span class="type">string</span></span><br><span class="line">    companyAddr <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    myCom := company &#123;</span><br><span class="line">        companyName: <span class="string">&quot;xx公司&quot;</span>,</span><br><span class="line">        companyAddr: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    staffinfo := staff &#123;</span><br><span class="line">        name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        age: <span class="number">32</span>,</span><br><span class="line">        company: myCom</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s在%s工作&quot;</span>, staffinfo.name, staffinfo.companyName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>input内容改变触发的事件</title>
    <url>/posts/64573.html</url>
    <content><![CDATA[<h1>onchange</h1>
<p>onchange事件触发的条件：</p>
<ul>
<li>元素的值改变了</li>
<li>元素失去焦点（在非IE中，回车同样会触发onchange事件）</li>
</ul>
<p>通过js改变DOM的值不会触发onchange事件，解决方式是在通过js给input赋值后，调用其change的funtion()。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;test&quot;</span> type=<span class="string">&quot;text&quot;</span> onchange=<span class="string">&quot;ok()&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ok</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&#x27;#test&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">    <span class="comment">//赋值后手动调用change事件</span></span><br><span class="line">    <span class="title function_">ok</span>();</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1>onpropertychange</h1>
<p>onpropertychange会实时触发，在元素的属性改变时就触发事件，当元素disable=true时不会触发该事件。</p>
<p>只在IE下支持，其他浏览器可使用oninput事件。</p>
<h1>oninput</h1>
<p>在<code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>的值发生改变的时候触发，不需要等到元素失去焦点，是实时的，可以用于检测文本输入框的值。IE9以下不支持该事件，IE9以下浏览器可使用onpropertychange事件来替代。</p>
<p>和onchange事件一样，在js中修改input的值后不会触发事件。</p>
<h1>addEventListener</h1>
<p>addEventListener()用于向指定元素添加时间方法，使用removeEventListener移除添加的事件方法，IE9以下不支持。</p>
<p>例：通过addEventListener()手动触发change事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听change事件</span></span><br><span class="line">W.<span class="property">document</span>.<span class="title function_">getElementById</span>(p_allowId).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="variable language_">console</span>.<span class="property">log</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 修改input的value</span></span><br><span class="line">W.<span class="property">document</span>.<span class="title function_">getElementById</span>(p_allowId).<span class="property">value</span>   = ret_selectedId;</span><br><span class="line"><span class="comment">// 构造change事件对象</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&#x27;UIEvents&#x27;</span>);</span><br><span class="line">event.<span class="title function_">initUIEvent</span>(<span class="string">&#x27;change&#x27;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="variable language_">window</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 触发input的change事件</span></span><br><span class="line">W.<span class="property">document</span>.<span class="title function_">getElementById</span>(p_allowId).<span class="title function_">dispatchEvent</span>(event);</span><br><span class="line"><span class="comment">// input赋值</span></span><br><span class="line">W.<span class="property">document</span>.<span class="title function_">getElementById</span>(p_allowName).<span class="property">value</span> = ret_selectedName;</span><br></pre></td></tr></table></figure>
<p>上面的例子中为了兼容IE需要使用下面的代码来构造change事件对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&#x27;UIEvents&#x27;</span>);</span><br><span class="line">event.<span class="title function_">initUIEvent</span>(<span class="string">&#x27;change&#x27;</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="variable language_">window</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>在chrome浏览器中，可以使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">UIEvent</span>(<span class="string">&#x27;change&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery常用方法总结</title>
    <url>/posts/47809.html</url>
    <content><![CDATA[<div class="note info simple"><p>最近在工作中频繁的使用jQuery，于是总结了一些jQuery中用到的比较多的一些方法。</p>
</div>
<h1>选择器</h1>
<p>jQuery可用通过id，class等查找或者选择元素，便于我们操作元素和在元素上绑定一些事件。在jQuery中所有的选择器都以<code>$</code>开头，最基础的选择器是id选择器和class选择器。</p>
<h2 id="id选择器">id选择器</h2>
<p>HTML页面中元素的id应该是唯一的，如果要通过唯一的id定位元素，可以使用<code>$(&quot;#id&quot;)</code>选择元素。比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;myInput&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果用jQuery选择器定位input元素可以写成<code>$(&quot;#myInput&quot;)</code>。</p>
<h2 id="class选择器">class选择器</h2>
<p>class是元素使用的css类，可以通过指定的class查找元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;simple&quot;</span>&gt;</span>This is a button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>语法为：<code>$(&quot;.simple&quot;)</code>，需要注意的是一个HTML中可能有多处使用了同一个css类，如果是要定位唯一的元素，需要加上其他的条件去做限制。</p>
<h2 id="选择器带上标签">选择器带上标签</h2>
<p>只有id选择器和class选择器肯定不能满足我们碰到的一些特殊场景，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;simple&quot;</span> <span class="attr">title</span>=<span class="string">&quot;simple&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;simple&quot;</span> <span class="attr">title</span>=<span class="string">&quot;simple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的input和button使用了相同的class，并且都没有id，如果想要定位到其中一个，可以通过属性title来定位选取title属性为simple的button元素，语法为：<code>$(&quot;button[title='simple']&quot;)</code>。<br>
更多的选择器方法可见<a href="https://www.runoob.com/jquery/jquery-ref-selectors.html%E3%80%82">https://www.runoob.com/jquery/jquery-ref-selectors.html。</a></p>
<h1>内容和属性</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">maxlength</span>=<span class="string">&quot;200&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myText&quot;</span>&gt;</span>在这里填写<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>text()
<ul>
<li>获取元素的文本内容，<code>$(&quot;#myText&quot;).text()</code>结果是<code>在这里填写</code></li>
<li>设置元素的文本内容，<code>$(&quot;#myText&quot;).text(&quot;123&quot;)</code>，会将<code>在这里填写</code>修改成<code>123</code></li>
</ul>
</li>
<li>val()
<ul>
<li>获取元素的value，<code>$(&quot;#filename&quot;).val()</code>结果是<code>1</code></li>
<li>设置元素的value， <code>$(&quot;#filename&quot;).val(&quot;2&quot;)</code>，会将input的value值从1改成2</li>
</ul>
</li>
<li>attr()
<ul>
<li>获取属性的值，<code>$(&quot;#myText&quot;).attr(&quot;maxlength&quot;)</code>结果是<code>200</code></li>
<li>设置属性的值，<code>$(&quot;#myText&quot;).attr(&quot;maxlength&quot;,&quot;300&quot;)</code>，会将textarea的maxlength值从200改成300</li>
</ul>
</li>
</ul>
<h1>添加、删除元素</h1>
<p>通过jQuery可以很方便的添加和删除元素。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>append()</td>
<td>在被选元素的结尾插入内容（仍然在该元素的内部）</td>
</tr>
<tr>
<td>prepend()</td>
<td>在被选元素的开头插入内容</td>
</tr>
<tr>
<td>after()</td>
<td>在被选元素之后插入内容</td>
</tr>
<tr>
<td>before()</td>
<td>在被选元素的之前插入内容</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--before 插入位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--prepend 插入位置--&gt;</span></span><br><span class="line">    This is a span.</span><br><span class="line">    <span class="comment">&lt;!--append 插入位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--after 插入位置--&gt;</span></span><br></pre></td></tr></table></figure>
<h1>遍历</h1>
<p>遍历是从被选元素的位置开始查找，直到找到期望的元素。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>first()</td>
<td>返回被选元素的第一个元素</td>
</tr>
<tr>
<td>last()</td>
<td>返回被选元素的最后一个元素</td>
</tr>
<tr>
<td>find()</td>
<td>返回被选元素的后代元素</td>
</tr>
<tr>
<td>parent()</td>
<td>返回被选元素的父元素</td>
</tr>
<tr>
<td>next()</td>
<td>返回被选元素的后一个同级元素</td>
</tr>
<tr>
<td>each()</td>
<td>为每一个元素执行函数<code>$(selector).each(function(index,element))</code></td>
</tr>
</tbody>
</table>
<h1>AJAX</h1>
<p>AJAX是在不重载网页的情况下，通过后台加载数据，并显示到网页上。jQuery有<code>$.get()</code>和<code>$.post()</code>进行GET和POST请求，当然所有的AJAX请求都可以使用<code>$.ajax()</code>方法来完成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">data</span>: data,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>java进行http请求</title>
    <url>/posts/62400.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PCCookieUtils</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 部分代码省略 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getSysTime</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Map&lt;String, String&gt; sysTimeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionid</span> <span class="operator">=</span> getFirstSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建get请求</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        <span class="comment">// 设置请求头</span></span><br><span class="line">        <span class="type">HttpContext</span> <span class="variable">httpContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicHttpContext</span>();   </span><br><span class="line">        <span class="type">HttpClientContext</span> <span class="variable">httpClientContext</span> <span class="operator">=</span> HttpClientContext.adapt(httpContext);</span><br><span class="line">        get.setHeader(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;JSESSIONID=&quot;</span>+sessionid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">CloseableHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">            <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(get, httpClientContext);) &#123;</span><br><span class="line">            <span class="comment">// 获取响应cookie</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(result);</span><br><span class="line">                time = jsonObject.getJSONObject(<span class="string">&quot;data&quot;</span>).getString(<span class="string">&quot;time&quot;</span>);</span><br><span class="line">                <span class="type">CookieStore</span> <span class="variable">cookieStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCookieStore</span>();</span><br><span class="line">                cookieStore = httpClientContext.getCookieStore();</span><br><span class="line">                <span class="keyword">for</span> (Cookie cookie : cookieStore.getCookies()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;JSESSIONID&quot;</span>.equals(cookie.getName())) &#123;</span><br><span class="line">                        sessionid = cookie.getValue();</span><br><span class="line">                        System.out.println(<span class="string">&quot;JSESSIONID-----&gt;&quot;</span> + sessionid);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sysTimeMap.put(<span class="string">&quot;time&quot;</span>, time);</span><br><span class="line">                sysTimeMap.put(<span class="string">&quot;sessionid&quot;</span>, sessionid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            get.releaseConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sysTimeMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLoginCookie</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">        List&lt;NameValuePair&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;NameValuePair&gt;();</span><br><span class="line">    </span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;domainAccount&quot;</span>, <span class="string">&quot;whir&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;userAccount&quot;</span>, userAccount));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;time&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;localeCode&quot;</span>, <span class="string">&quot;zh_CN&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**部分代码省略</span></span><br><span class="line"><span class="comment">        ........</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">rsaPassword</span> <span class="operator">=</span> RSAUtils.encryptString(publicKey, pwdStr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">rsaPasswordTemp</span> <span class="operator">=</span> RSAUtils.encryptString(publicKey, upwdStr);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;userPassword&quot;</span>, rsaPassword));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;userPasswordTemp&quot;</span>, rsaPasswordTemp));</span><br><span class="line">        <span class="type">UrlEncodedFormEntity</span> <span class="variable">uefEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(list, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建post请求</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        <span class="comment">// 设置请求参数</span></span><br><span class="line">        post.setEntity(uefEntity);</span><br><span class="line">        <span class="comment">// 设置请求头</span></span><br><span class="line">        post.setHeader(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;JSESSIONID=&quot;</span>+jsession);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">loginSession</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">HttpContext</span> <span class="variable">httpContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicHttpContext</span>();</span><br><span class="line">        <span class="type">HttpClientContext</span> <span class="variable">httpClientContext</span> <span class="operator">=</span> HttpClientContext.adapt(httpContext);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">CloseableHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">             <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(post, httpClientContext);) &#123;</span><br><span class="line">            <span class="comment">// 获取响应头</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">                <span class="type">CookieStore</span> <span class="variable">cookieStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCookieStore</span>();</span><br><span class="line">                cookieStore = httpClientContext.getCookieStore();</span><br><span class="line">                <span class="keyword">for</span> (Cookie cookie : cookieStore.getCookies()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;JSESSIONID&quot;</span>.equals(cookie.getName())) &#123;</span><br><span class="line">                        loginSession = cookie.getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            post.releaseConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loginSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>js合并单元格</title>
    <url>/posts/4799.html</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并单元格</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table1 表格的id或者类名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startRow 起始行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endRow  结束行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> col 合并的列号， 从0开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dyCol 对应列号， 根据哪些列进行对齐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> flag 0:合并后只保留一个值 1:值相加后合并</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeCell</span>(<span class="params">table1, startRow, endRow, col, dyCol, flag</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tb = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(table1);</span><br><span class="line">    <span class="keyword">if</span> (!tb || !tb.<span class="property">rows</span> || tb.<span class="property">rows</span>.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (col &gt;= tb.<span class="property">rows</span>[<span class="number">0</span>].<span class="property">cells</span>.<span class="property">length</span> || (startRow &gt;= endRow &amp;&amp; endRow != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (endRow == <span class="number">0</span>) &#123;</span><br><span class="line">        endRow = tb.<span class="property">rows</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=startRow;i&lt;endRow;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tb.<span class="property">rows</span>[startRow].<span class="property">cells</span>[col].<span class="property">innerHTML</span> == tb.<span class="property">rows</span>[i+<span class="number">1</span>].<span class="property">cells</span>[col].<span class="property">innerHTML</span>)&#123;</span><br><span class="line">                tb.<span class="property">rows</span>[i+<span class="number">1</span>].<span class="title function_">removeChild</span>(tb.<span class="property">rows</span>[i+<span class="number">1</span>].<span class="property">cells</span>[col]);</span><br><span class="line">                tb.<span class="property">rows</span>[startRow].<span class="property">cells</span>[col].<span class="property">rowSpan</span> = (tb.<span class="property">rows</span>[startRow].<span class="property">cells</span>[col].<span class="property">rowSpan</span>)+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mergeCell (table1, i+<span class="number">1</span>, endRow, col, dyCol,flag);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> condition = <span class="string">&#x27;tb.rows[startRow].cells[&#x27;</span> + dyCol + <span class="string">&#x27;].innerHTML==tb.rows[i+1].cells[&#x27;</span> + dyCol + <span class="string">&#x27;].innerHTML&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">eval</span>(condition)) &#123;</span><br><span class="line">                <span class="keyword">var</span> data1 = tb.<span class="property">rows</span>[startRow].<span class="property">cells</span>[col].<span class="property">innerHTML</span>;</span><br><span class="line">                <span class="keyword">var</span> data2 = tb.<span class="property">rows</span>[i+<span class="number">1</span>].<span class="property">cells</span>[col].<span class="property">innerHTML</span>;</span><br><span class="line">                tb.<span class="property">rows</span>[startRow].<span class="property">cells</span>[col].<span class="property">innerHTML</span> = <span class="title class_">Number</span>(data1) + <span class="title class_">Number</span>(data2);</span><br><span class="line">                tb.<span class="property">rows</span>[i+<span class="number">1</span>].<span class="title function_">removeChild</span>(tb.<span class="property">rows</span>[i+<span class="number">1</span>].<span class="property">cells</span>[col]);</span><br><span class="line">                tb.<span class="property">rows</span>[startRow].<span class="property">cells</span>[col].<span class="property">rowSpan</span> = (tb.<span class="property">rows</span>[startRow].<span class="property">cells</span>[col].<span class="property">rowSpan</span>)+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                mergeCell (table1, i+<span class="number">1</span>, endRow, col, dyCol, flag);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js对数据进行自定义排序</title>
    <url>/posts/4409.html</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 按照userId进行排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">a</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">b</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userIdA = a.<span class="property">userId</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">const</span> userIdB = b.<span class="property">userId</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">var</span> comparison = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (userIdA &gt; userIdB) &#123;</span><br><span class="line">        comparison = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userIdA &lt; userIdB) &#123;</span><br><span class="line">        comparison = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparison;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> arr_new = arr.<span class="title function_">sort</span>(compare);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>kingbase高可用验证</title>
    <url>/posts/26149.html</url>
    <content><![CDATA[<h3 id="查看复制状态">查看复制状态</h3>
<p>在<code>master</code>上执行<code>select * from sys_stat_replication;</code><br>
<code>client_addr</code>slave的IP地址<br>
<code>client_port</code>slave的wal receive process的PID使用的端口<br>
<code>backend_start</code>开始复制的时间<br>
<code>state</code>同步状态</p>
<ul>
<li>streaming: 同步</li>
<li>startup: 连接中</li>
<li>catchup: 同步中</li>
</ul>
<p><code>send_location</code>master传送的wal位置<br>
<code>write_location</code>slave接收的wal位置<br>
<code>flush_location</code>slave同步到磁盘的wal位置<br>
<code>replay_location</code>slave同步到数据库的wal位置<br>
<code>sync_priority</code>同步优先级<br>
<code>sync_state</code>同步模式</p>
<ul>
<li>sync:同步模式</li>
<li>async:异步</li>
<li>potential:虽然现在是异步，但有可能提升到同步</li>
</ul>
<h3 id="查看复制槽信息">查看复制槽信息</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys_replication_slots;</span><br></pre></td></tr></table></figure>
<h3 id="查看延迟多少">查看延迟多少</h3>
<p>在<code>master</code>上执行以下SQL查看滞后程度，以字节为单位</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sys_xlog_location_diff(sent_location,replay_location) <span class="keyword">from</span> sys_stat_replication;</span><br></pre></td></tr></table></figure>
<p>或者在<code>slave</code>上执行以下sql可以查看滞后时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> sys_last_xlog_receive_location() <span class="operator">=</span> sys_last_xlog_replay_location()</span><br><span class="line"><span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> <span class="built_in">extract</span>(epoch <span class="keyword">from</span> now() <span class="operator">-</span> sys_last_xact_replay_timestamp())<span class="keyword">end</span> <span class="keyword">as</span> log_delay;</span><br></pre></td></tr></table></figure>
<h3 id="查看是否处于recovery模式">查看是否处于recovery模式</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sys_is_in_recovery();</span><br></pre></td></tr></table></figure>
<p>正常情况下主库为f，备库为t。如果处于复制模式的话，<code>select sys_last_xact_replay_timestamp();</code>和<code>select sys_last_xlog_replay_location();</code>会一直增加。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sys_last_xlog_receive_location(); <span class="comment">--standby最后接收到的事务日志位置</span></span><br><span class="line"><span class="keyword">select</span> sys_last_xlog_replay_location();  <span class="comment">--最后应用到的事务日志位置</span></span><br><span class="line"><span class="keyword">select</span> sys_last_xact_replay_timestamp(); <span class="comment">--recovery最后应用到的事务日志位置</span></span><br></pre></td></tr></table></figure>
<h3 id="查看集群信息">查看集群信息</h3>
<p>查看节点信息：<br>
<code>./pcp_node_info -U kingbase -W 123456 0 </code><br>
<em>用户名和密码记录在pcp.conf文件中，0代表node id</em><br>
查看看门狗信息：<br>
<code>./pcp_watchdog_info -U kingbase -W 123456</code><br>
查看所有节点:<br>
ksql -USYSTEM -W12345678ab TEST -P999进入数据库，执行<code>show pool_nodes;</code><br>
将节点重新加入集群：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./pcp_attach_node -U kingbase -W 123456 0 </span><br><span class="line">  -U, <span class="attribute">--username</span>=NAME     pcp安全认证的用户</span><br><span class="line">  -h, <span class="attribute">--host</span>=HOSTNAME     pcp连接ip（localhost）</span><br><span class="line">  -p, <span class="attribute">--port</span>=PORT         pcp连接端口号 默认9898</span><br><span class="line">  -w, --no-password       pcp连接不需要密码认证</span><br><span class="line">  -W, --password          pcp密码认证 一般在pcp.conf这个文件中</span><br><span class="line">  -n, <span class="attribute">--node-id</span>=NODEID    show pool_nodes;查到的</span><br><span class="line">  -d, --<span class="built_in">debug</span>             debug模式最好为-d 5</span><br><span class="line">  -v, --verbose           输出的详细信息</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>高可用测试</category>
      </categories>
      <tags>
        <tag>kingbase</tag>
        <tag>高可用测试</tag>
      </tags>
  </entry>
  <entry>
    <title>oss分片上传</title>
    <url>/posts/21872.html</url>
    <content><![CDATA[<div class="note info modern"><p>本文为阿里云的oss分片上传示例。</p>
</div>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">uploadPart</span><span class="params">(b *oss.Bucket, objectKey <span class="type">string</span>, localFile <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="comment">// 根据文件大小分片</span></span><br><span class="line">	<span class="keyword">var</span> maxPartSize <span class="type">int64</span> = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">	chunks, err := oss.SplitFileByPartSize(localFile, maxPartSize)</span><br><span class="line">	imur, err := b.InitiateMultipartUpload(objectKey)</span><br><span class="line">	fd, err := os.Open(localFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> fd.Close()</span><br><span class="line">	<span class="keyword">var</span> parts []oss.UploadPart</span><br><span class="line">	<span class="keyword">for</span> _, chunk := <span class="keyword">range</span> chunks &#123;</span><br><span class="line">		fd.Seek(chunk.Offset, os.SEEK_SET)</span><br><span class="line">		part, err := b.UploadPart(imur, fd, chunk.Size, chunk.Number)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Error: %v&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		parts = <span class="built_in">append</span>(parts, part)</span><br><span class="line">	&#125;</span><br><span class="line">	_, err = b.CompleteMultipartUpload(imur, parts)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Error: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>POI数据导出</title>
    <url>/posts/52204.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchVO 查询条件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportData</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ContractInfoSearchVO searchVO)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">paramMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        getSearchSql(sql, paramMap, searchVO);</span><br><span class="line">        List&lt;Map&gt; list  = <span class="built_in">super</span>.findByListNativeQuery(sql.toString(), <span class="string">&quot;&quot;</span>, paramMap);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            <span class="type">HSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line">            <span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb.createSheet();</span><br><span class="line">            loadDataToSheet(wb, sheet, list);</span><br><span class="line">            response.reset();</span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + calendar.get(Calendar.YEAR) + <span class="string">&#x27;-&#x27;</span> +(calendar.get(Calendar.MONTH)+<span class="number">1</span>) + <span class="string">&#x27;-&#x27;</span> + calendar.get(Calendar.DATE);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> AttachUtils.encodingFileName(<span class="string">&quot;合同查询导出结果&quot;</span> + <span class="string">&quot;-&quot;</span> + time + <span class="string">&quot;.xls&quot;</span>, request);</span><br><span class="line">            <span class="comment">// 解决文件名乱码</span></span><br><span class="line">            <span class="keyword">if</span> (request.getHeader(<span class="string">&quot;User-Agent&quot;</span>).toLowerCase().indexOf(<span class="string">&quot;firefox&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename*=UTF-8&#x27;&#x27;&quot;</span> + fileName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + fileName);</span><br><span class="line">            &#125;</span><br><span class="line">            response.setContentType(<span class="string">&quot;APPLICATION/OCTET-STREAM&quot;</span>);</span><br><span class="line">            wb.write(outputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;导出数据出错&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数据填入表格中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wb 表格对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sheet 表格页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDataToSheet</span><span class="params">(HSSFWorkbook wb, HSSFSheet sheet, List&lt;Map&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">// 字体</span></span><br><span class="line">        <span class="type">HSSFFont</span> <span class="variable">font</span> <span class="operator">=</span> wb.createFont();</span><br><span class="line">        font.setBold(<span class="literal">true</span>);</span><br><span class="line">        font.setFontName(<span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">        <span class="comment">// 格式</span></span><br><span class="line">        <span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> wb.createCellStyle();</span><br><span class="line">        cellStyle.setWrapText(<span class="literal">true</span>); <span class="comment">// 设置自动换行</span></span><br><span class="line">        cellStyle.setFont(font); <span class="comment">// 设置字体：黑体加粗</span></span><br><span class="line">        cellStyle.setAlignment(HorizontalAlignment.CENTER); <span class="comment">// 居中</span></span><br><span class="line">        String[] title = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;合同名称&quot;</span>, <span class="string">&quot;合同编号&quot;</span>, <span class="string">&quot;合同类型&quot;</span>, <span class="string">&quot;合同金额（元）&quot;</span>, <span class="string">&quot;经办人&quot;</span>, <span class="string">&quot;合同状态&quot;</span>, <span class="string">&quot;登记时间&quot;</span>,</span><br><span class="line">                <span class="string">&quot;登记人&quot;</span>, <span class="string">&quot;累计支付情况&quot;</span>, <span class="string">&quot;未支付情况&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowNum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//行号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">totalColNum</span> <span class="operator">=</span> title.length; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">HSSFRow</span> <span class="variable">titleRow</span> <span class="operator">=</span> sheet.createRow(rowNum++);</span><br><span class="line">        titleRow.setHeight((<span class="type">short</span>) <span class="number">800</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;title.length; i++) &#123; <span class="comment">// 设置标题行</span></span><br><span class="line">            <span class="type">HSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> titleRow.createCell(i);</span><br><span class="line">            cell.setCellValue(title[i]);</span><br><span class="line">            cell.setCellStyle(cellStyle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(list)) &#123; <span class="comment">// 填入数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">                <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">                <span class="type">HSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(rowNum++);</span><br><span class="line">                row.setHeight((<span class="type">short</span>) <span class="number">600</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">htmc</span> <span class="operator">=</span> map.get(<span class="string">&quot;htmc&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;htmc&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">htbh</span> <span class="operator">=</span> map.get(<span class="string">&quot;htbh&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;htbh&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">htlxmc</span> <span class="operator">=</span> map.get(<span class="string">&quot;htlxmc&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;htlxmc&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">htje</span> <span class="operator">=</span> map.get(<span class="string">&quot;htje&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;htje&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">jbr</span> <span class="operator">=</span> map.get(<span class="string">&quot;jbr&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;jbr&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">htztmc</span> <span class="operator">=</span> map.get(<span class="string">&quot;htztmc&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;htztmc&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">djsj</span> <span class="operator">=</span> map.get(<span class="string">&quot;djsj&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;djsj&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">djr</span> <span class="operator">=</span> map.get(<span class="string">&quot;djrmc&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;djrmc&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">paid</span> <span class="operator">=</span> map.get(<span class="string">&quot;paid&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;0&quot;</span> : map.get(<span class="string">&quot;paid&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">htlx</span> <span class="operator">=</span> map.get(<span class="string">&quot;htlx&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : map.get(<span class="string">&quot;htlx&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">payment_received</span> <span class="operator">=</span> map.get(<span class="string">&quot;payment_received&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;0&quot;</span> : map.get(<span class="string">&quot;payment_received&quot;</span>).toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">unpaid</span> <span class="operator">=</span> map.get(<span class="string">&quot;unpaid&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;0&quot;</span> : map.get(<span class="string">&quot;unpaid&quot;</span>).toString();</span><br><span class="line">                String[] data = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;htmc, htbh, htlxmc, htje, jbr, htztmc, djsj, djr, paid, unpaid&#125;;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;data.length;j++) &#123;</span><br><span class="line">                    row.createCell(j).setCellValue(data[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;totalColNum; i++) &#123;</span><br><span class="line">            sheet.autoSizeColumn((<span class="type">short</span>)i, <span class="literal">true</span>);  <span class="comment">// 自动调整列宽</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>pytest框架教程</title>
    <url>/posts/65221.html</url>
    <content><![CDATA[<h1>pytest的简单使用</h1>
<h2 id="安装环境">安装环境</h2>
<p>pytest是基于python的一个测试框架，可以用作单元测试、接口测试和UI测试。</p>
<p>在开始之前需要准备python环境，以及IDE。python安装比较简单，官网下载安装包后直接安装就行。IDE推荐使用jetbrains全家桶中的pycharm。<br>
本文使用的python版本为：python 3.10.0，pycharm版本为： 2021.2 。</p>
<p>在pycharm中新建python项目，项目创建后在terminal中以命令<code>pip install pytest</code>安装pytest。</p>
<div class="note blue non-icon flat"><p>如果pip安装时下载速度特别慢，可以在用户路径<code>C:\Users\xxx\</code>下创建pip目录，在该目录中创建<code>pip.ini</code>文件，将镜像地址写入文件。<br>
<code>pip.ini</code>:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://mirrors.aliyun.com/pypi/simple</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span> = https://mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<p>再用<code>pip install pytest</code>安装。</p>
</div>
<p>二、pytest的第一个例子</p>
<p>创建第一个脚本<code>test_demo.py</code>，内容如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_demo1</span>():</span><br><span class="line">    <span class="keyword">assert</span> (<span class="number">1</span>,<span class="number">2</span>) == (<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>在终端中输入命令<code>pytest test_demo.py</code>，结果入下：</p>
<img src="/posts/65221/%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="This is an image">
<h2 id="输出报告">输出报告</h2>
<ul>
<li>pytest-html<br>
pytest框架包含了图形化报告插件，图表丰富，页面美观，也支持输出html形式的报告。<br>
执行命令<code>pip install pytest-html</code>安装插件。<br>
执行命令<code>pytest test_demo.py --html=./report/report.html</code>生成报告文件。</li>
</ul>
<img src="/posts/65221/html%E6%8A%A5%E5%91%8A.png" class="" title="This is an image">
<ul>
<li>allure<br>
allure是图形化报表的插件，pytest的灵活性也支持安装allure。
<ul>
<li>执行命令<code>pip install allure-pytest</code>安装插件。</li>
<li>执行命令<code>pytest test_demo.py --alluredir ./report/allure/</code>生成报告，此时会在对应的目录中生成json文件，如果要查看html格式的文件，需要先安装allure。下载后解压文件，并将bin目录添加到path环境变量中。</li>
<li>安装后执行<code>allure serve ./report/allure</code>将json数据转成html。<img src="/posts/65221/allure%E6%8A%A5%E5%91%8A.png" class="" title="This is an image">
</li>
</ul>
</li>
</ul>
<h2 id="打印日志">打印日志</h2>
<p>打印日志是必备的模块，我们需要在代码的必要位置添加日志信息来定位程序走到哪一步。python中提供日志功能的标准模块就是logging，通常用法是用logging模块创建logger，为logger配置handler让日志output到某一位置，还需要定制化日志信息格式。</p>
<p>在pytest中只需要在pytest.ini配置好logging信息就可以了。</p>
<p>在项目根目录下创建<code>pytest.ini</code>文件。</p>
<div class="note blue non-icon flat"><p>只能在根目录下创建，文件名称必须是pytest.ini</p>
</div>
<p><code>pytest.ini</code>:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"><span class="comment"># 使用标准输出</span></span><br><span class="line"><span class="attr">log_cli</span> = <span class="literal">True</span> </span><br><span class="line"><span class="comment"># 标准输出的日志级别</span></span><br><span class="line"><span class="attr">log_cli_level</span> =DEBUG </span><br><span class="line"><span class="comment"># 标准输出的日期格式</span></span><br><span class="line"><span class="attr">log_cli_date_format</span> = %Y-%m-%d-%H-%M-%S</span><br><span class="line"><span class="comment"># 标准输出的内容格式</span></span><br><span class="line"><span class="attr">log_cli_format</span> = %(asctime)s - %(filename)s - %(module)s - %(funcName)s - %(line<span class="literal">no</span>)d - %(levelname)s - %(message)s</span><br><span class="line"><span class="comment"># 输出到文件</span></span><br><span class="line"><span class="attr">log_file</span> = test.log</span><br><span class="line"><span class="comment"># 文件输出的日志级别</span></span><br><span class="line"><span class="attr">log_file_level</span> = DEBUG</span><br><span class="line"><span class="comment"># 文件输出的日期格式</span></span><br><span class="line"><span class="attr">log_file_date_format</span> = %Y-%m-%d-%H-%M-%S</span><br><span class="line"><span class="comment"># 文件输出的内容格式</span></span><br><span class="line"><span class="attr">log_file_format</span> = %(asctime)s - %(filename)s - %(module)s - %(funcName)s - %(line<span class="literal">no</span>)d - %(levelname)s - %(message)s</span><br></pre></td></tr></table></figure>
<p>在代码中引入logging，示例如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">log = logging.getLogger(<span class="string">&#x27;test_demo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_success</span>():</span><br><span class="line">    log.info(<span class="string">&#x27;这是一个成功用例&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_fail</span>():</span><br><span class="line">    log.error(<span class="string">&#x27;这是一个失败用例&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_skip</span>():</span><br><span class="line">    log.info(<span class="string">&#x27;跳过这个用例&#x27;</span>)</span><br><span class="line">    pytest.skip(<span class="string">&#x27;跳过这个用例！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_broken</span>():</span><br><span class="line">    log.error(<span class="string">&#x27;这是一个异常用例&#x27;</span>)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;出错啦~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="接口测试实例">接口测试实例</h2>
<p>了解了以上这些之后，我们可以尝试写接口用例了。<br>
<code>pip install requests</code>安装插件，用于发送http请求。<br>
示例代码：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">log = logging.getLogger(<span class="string">&#x27;test_api&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_find_todo_task_list</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;findTodoTaskList.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    url = <span class="string">&#x27;http://ip:port/api/&#x27;</span></span><br><span class="line">    r = requests.post(url, json=data)</span><br><span class="line">    log.info(<span class="string">&#x27;请求url:&#x27;</span> + r.url)</span><br><span class="line">    log.info(<span class="string">&#x27;请求体:&#x27;</span> + json.dumps(data))</span><br><span class="line">    response_json = r.json()</span><br><span class="line">    log.info(<span class="string">&#x27;响应json:&#x27;</span> + <span class="built_in">str</span>(response_json))</span><br><span class="line">    <span class="keyword">assert</span> r.status_code == <span class="number">200</span></span><br></pre></td></tr></table></figure>
<p>运行后结果如下：</p>
<img src="/posts/65221/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" class="" title="This is an image">
<h1>pytest进阶</h1>
<p>通过上面的例子学会基本的使用方式之后，我们还有一些问题没有解决，比如：</p>
<ol>
<li>allure和pytest-html生成报告都需要指定报告路径，输入命令太长比较麻烦</li>
<li>执行用例的时候怎么切换环境配置，比如从测试环境切到稳定环境</li>
<li>如何一次性执行所有用例</li>
<li>给用例打标签，分类</li>
</ol>
<h2 id="addopts">addopts</h2>
<p>使用<code>addopts</code>添加命令行数据集，在执行时，不用每次都输入长命令。<br>
在<code>pytest.ini</code>文件中添加一行<code>addopts</code>指定allure报告的输出路径，有其他的命令也可以在此添加</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">addopts</span> = --alluredir report/allure</span><br></pre></td></tr></table></figure>
<h2 id="环境切换">环境切换</h2>
<ol>
<li>在项目中新建<code>conftest.py</code>文件。</li>
</ol>
<div class="note blue non-icon flat"><ul>
<li>pytest用例会自动识别conftest文件，该文件如果放到项目的根目录下，可以全局调用，如果放到某个package下，只在pacakge内有效，可以有多个<code>conftest.py</code></li>
<li><code>conftest.py</code>的文件名称是固定的，不可修改</li>
<li>所有同目录测试文件运行前都会执行<code>conftest.py</code>文件</li>
<li><code>conftest.py</code>文件不能被其他文件导入</li>
</ul>
</div>
<ol start="2">
<li>在<code>conftest.py</code>增加函数，添加一个自定义运行参数。</li>
<li>定义一个函数，获取自定义运行参数的值。</li>
<li>根据运行参数的值，决定使用什么环境的配置。</li>
</ol>
<p>完整代码如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义环境配置</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">release</span>():</span><br><span class="line">    release = &#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://ip:port&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;pwd&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> release </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义环境配置</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dev</span>():</span><br><span class="line">    dev = &#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;http://ip:port&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;pwd&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个运行参数 --env</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytest_addoption</span>(<span class="params">parser</span>):</span><br><span class="line">    parser.addoption(</span><br><span class="line">        <span class="string">&quot;--env&quot;</span>, action=<span class="string">&quot;store&quot;</span>, default=<span class="string">&quot;release&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取env参数</span></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;session&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_env</span>(<span class="params">pytestconfig</span>):</span><br><span class="line">    <span class="keyword">return</span> pytestconfig.getoption(<span class="string">&#x27;--env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据env参数的值获取不同的环境配置</span></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;session&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_params</span>(<span class="params">get_env</span>):</span><br><span class="line">    <span class="keyword">match</span> get_env:  <span class="comment"># match-case在3.10版本中使用，3.9及以下版本中可以使用if-else</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;release&#x27;</span>:</span><br><span class="line">            login_params = release()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;dev&#x27;</span>:</span><br><span class="line">            login_params = dev()</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            login_params = dev()</span><br><span class="line">    <span class="keyword">return</span> login_params  <span class="comment"># 返回login_params给用例使用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>定义环境配置后，在用例中可以直接使用login_params，如：</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_find_todo_task_list</span>(<span class="params">login_params</span>):</span><br><span class="line">    ... 省略 ...</span><br><span class="line">    url = login_params[<span class="string">&#x27;url&#x27;</span>] + <span class="string">&#x27;/api&#x27;</span></span><br><span class="line">    ... 省略 ...</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>指定用例时在main.py中添加运行参数或者在pytest.ini中添加</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">main.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;./testcase/&#x27;</span>, <span class="string">&#x27;--env=release&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pytest.ini</span></span><br><span class="line"><span class="attr">addopts</span> = --alluredir report/allure --env=release</span><br></pre></td></tr></table></figure>
<h2 id="用例执行">用例执行</h2>
<h3 id="pytest常用命令参数">pytest常用命令参数</h3>
<ul>
<li><code>-s</code><br>
在执行用例时执行print打印函数，不带此参数会跳过print</li>
<li><code>-x</code><br>
用例运行失败立即停止执行</li>
<li><code>--maxfail=num</code><br>
用例运行时，允许的最大失败次数，如果超过该次数立即停止执行</li>
<li><code>l</code><br>
用例运行失败时，打印相关的局部变量</li>
<li><code>k</code><br>
运行包含关键词的用例，如果py文件名和函数均包含关键词，需要指定py文件，例：<code>pytest -k &quot;demo&quot; </code></li>
<li><code>v</code>或<code>q</code><br>
<code>-v</code>打印用例执行的详细过程, <code>-q</code>打印用例执行的简略过程</li>
<li><code>--lf</code>或者<code>--last-failed</code><br>
只执行上次失败的测试</li>
<li><code>m</code><br>
执行含有指定标签的用例</li>
</ul>
<h3 id="pytest名称规范">pytest名称规范</h3>
<ul>
<li>测试文件以<code>test</code>开头（或者以test结尾）</li>
<li>测试类以<code>Test</code>开头，并且不能带有init方法</li>
<li>测试函数以<code>test_</code>开头</li>
</ul>
<h3 id="多个用例执行">多个用例执行</h3>
<ul>
<li>在控制台使用命令执行，比如<code>pytest -v -s ./testcase/</code></li>
<li>在<code>main.py</code>中指定参数，并执行<code>main.py</code></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;./testcase/&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="pytest-mark">@pytest.mark</h2>
<h3 id="自定义标签">自定义标签</h3>
<p>在<code>pytest.ini</code>文件中，配置自定义的标签</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">markers</span> =</span><br><span class="line">    demo</span><br><span class="line">    test</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">markers</span>=[</span><br><span class="line">    <span class="string">&quot;demo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在用例中使用<code>@pytest.mark.demo</code>装饰器给用例打上标签，如果要打多个标签，多次使用<code>@pytest.mark</code>即可。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.demo</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_success</span>():</span><br><span class="line">    log.info(<span class="string">&#x27;这是一个成功用例&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="参数化">参数化</h3>
<p>pytest参数化使用<code>@pytest.mark.parameterize(argnames, argvalues)</code>装饰器接收参数。<br>
<code>argnames</code>是参数名称，必须是字符串的形式<br>
<code>argvalues</code>是期望值，必须是<code>[(),(),()]</code>或者<code>[[],[],[]]</code>形式<br>
当有多个参数时，argvalues列表中的元素和参数名称一一对应。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">account = [(<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>), (<span class="string">&#x27;Tracy&#x27;</span>, <span class="string">&#x27;qwer&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器中定义两个参数，user,passwd,列表中为参数对应的值</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;user, passwd&#x27;</span>, account</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_parameterize</span>(<span class="params">user, passwd</span>):</span><br><span class="line">    db = &#123;</span><br><span class="line">        <span class="string">&#x27;Jack&#x27;</span>: <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Tracy&#x27;</span>: <span class="string">&#x27;962012d09b8170d912f0669f6d7d9d07&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">assert</span> hashlib.md5(passwd.encode()).hexdigest() == db[user]</span><br></pre></td></tr></table></figure>
<h2 id="fixture">fixture</h2>
<p>fixture是pytest的特有功能，使用装饰器<code>@pytest.fixture</code>装饰函数后，可以将此函数名称作为传入参数。可以将fixture看作是测试前的前置准备或者前置条件，用例执行前执行。</p>
<p><strong>fixture定义</strong></p>
<ul>
<li>fixture是一个函数，在函数上添加<code>@pytest.fixture</code>定义，被修饰的函数不能是测试用例</li>
<li>定义在<code>conftest.py</code>中，无需import就可以调用</li>
<li>定义在其他文件中，import后进行调用调用</li>
<li>定义在相同文件中，直接调用</li>
</ul>
<p><strong>fixture的使用方式</strong></p>
<ul>
<li><code>@pytest.mark.usefixtures(fixturename)</code>修饰类或者函数</li>
<li>作为函数参数传入</li>
<li>使用autouse</li>
</ul>
<p><strong>fixture的作用范围(scope)</strong></p>
<ul>
<li>function: 每个test都调用，scope默认值是function</li>
<li>class： 每个类调用一次</li>
<li>module: 每一个模块调用一次，该文件内有多个方法和类</li>
<li>package: 每个包调用一次</li>
<li>session: 每个session调用一次</li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;function&quot;</span>, autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prepare</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is a fixture&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_fixture_1</span>(<span class="params">prepare</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> prepare</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.usefixtures(<span class="params"><span class="string">&quot;prepare&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_fixture_2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_fixture_3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test_3&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>使用<code>pytest -v -s</code>命令执行后，输出结果为：</p>
<figure class="highlight mizar"><table><tr><td class="code"><pre><span class="line">testcase/test_fixture.py<span class="comment">::test_fixture_1 This is a fixture</span></span><br><span class="line">test_1</span><br><span class="line">PASSED</span><br><span class="line">testcase/test_fixture.py<span class="comment">::test_fixture_2 This is a fixture</span></span><br><span class="line">test_2</span><br><span class="line">PASSED</span><br><span class="line">testcase/test_fixture.py<span class="comment">::test_fixture_3 This is a fixture</span></span><br><span class="line">test_3</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure>
<p>如果没有autouse，test_3不会调用fixture，在fixture添加autouse后，根据fixture的scope自动调用。</p>
<p>参考：</p>
<ol>
<li>pytest官方文档：<a href="https://docs.pytest.org/en/7.1.x/">https://docs.pytest.org/en/7.1.x/</a></li>
<li>requests官方文档：<a href="https://requests.readthedocs.io/en/latest/">https://requests.readthedocs.io/en/latest/</a></li>
<li>pytest快速入门：<a href="https://learning-pytest.readthedocs.io/zh/latest/doc/test-function/parametrize.html">https://learning-pytest.readthedocs.io/zh/latest/doc/test-function/parametrize.html</a></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础语法</title>
    <url>/posts/29992.html</url>
    <content><![CDATA[<h2 id="基础语法">基础语法</h2>
<h3 id="中文编码">中文编码</h3>
<p>python中如果输出中文字符，没有指定编码，在执行的时候会报错。<br>
可以在<code>py</code>文件的开头指定文件编码，文件开头加入<code># -*- coding:utf-8 -*-</code>或者<code># coding=utf-8</code>。<br>
在linux环境中，需要在文件开头添加<code>#! /usr/bin/python</code>指定需要用python解释器运行。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好，世界&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="行和缩进">行和缩进</h3>
<p>python的代码块不使用<code>&#123;&#125;</code>来控制类，用缩进来编写模块，所以python有比较严格的缩进。<br>
缩进的空格数量是可变的，但是所有代码块语句必须为相同的缩进。<br>
例如下面的这段执行后会出现indentationError。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>每个缩进可以使用一个<strong>tab</strong>或者<strong>两个空格</strong>或者<strong>四个空格</strong>，不能混用。<br>
一行代码如果过长，可以使用<code>\</code>将一行的语句分为多行显示。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;hello&quot;</span> + \</span><br><span class="line">    <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<p>如果代码中本身包含<code>[]</code>,<code>&#123;&#125;</code>,<code>()</code>，则不需要使用斜杠。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">days = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(days[random.randint(<span class="number">0</span>, <span class="number">4</span>)])</span><br></pre></td></tr></table></figure>
<p>python默认以新行分割代码，如果要在同一行中显示多个语句，可以使用<code>;</code>来分割。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">random</span></span><br><span class="line"></span><br><span class="line">days = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>,<span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]; <span class="built_in">print</span>(days[<span class="built_in">random</span>.<span class="property">randint</span>(<span class="number">0</span>, <span class="number">4</span>)])</span><br></pre></td></tr></table></figure>
<h3 id="引号">引号</h3>
<p>python中可以使用单引号<code>'</code>,双引号<code>&quot;</code>,三引号<code>'''</code>或者<code>&quot;&quot;&quot;</code>来表示字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;hello world~&quot;</span></span><br><span class="line">s3 = <span class="string">&quot;&quot;&quot;这是一个段落，</span></span><br><span class="line"><span class="string">包含多行&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="注释">注释</h3>
<p>单行注释使用<code>#</code>。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello,world&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>多行注释使用三引号<code>'''</code>或者<code>&quot;&quot;&quot;</code>。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释。</span></span><br><span class="line"><span class="string">这是多行注释。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释。</span></span><br><span class="line"><span class="string">这是多行注释。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="输出">输出</h3>
<p>print函数默认输出是换行的，要不换行可以使用逗号<code>,</code>。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">y = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;换行输出：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不换行输出：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x, y)</span><br></pre></td></tr></table></figure>
<p>上面的代码最后的输出结果为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">换行输出：</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">不换行输出：</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h2 id="变量">变量</h2>
<h3 id="变量赋值">变量赋值</h3>
<p>python的变量赋值不需要声明变量类型。每个变量使用前都需要赋值，赋值之后变量才会被创建。<br>
变量存储在内存中，创建变量后，解释器会分配指定内存。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line">height = <span class="number">100.0</span></span><br><span class="line">name = <span class="string">&#x27;Mark&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(number)</span><br><span class="line"><span class="built_in">print</span>(height)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure>
<h3 id="多个变量赋值">多个变量赋值</h3>
<p>例1：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure>
<p>创建了一个整型对象，三个变量赋了相同的值，分配到相同的内存空间上。<br>
例2：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">100.0</span>, <span class="string">&#x27;Mark&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure>
<p>三个变量分别赋值，等价于</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">100.0</span></span><br><span class="line">c = <span class="string">&#x27;Mark&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="运算符">运算符</h2>
<h3 id="算术运算符">算术运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>x + y</code></td>
<td>两个数相加</td>
</tr>
<tr>
<td><code>x - y</code></td>
<td>两个数相减</td>
</tr>
<tr>
<td><code>x * y</code></td>
<td>两个数相乘</td>
</tr>
<tr>
<td><code>x / y</code></td>
<td>x除以y</td>
</tr>
<tr>
<td><code>x % y</code></td>
<td>取模（除法的余数）</td>
</tr>
<tr>
<td><code>x ** y</code></td>
<td>x的y次幂</td>
</tr>
<tr>
<td><code>x // y</code></td>
<td>向下取整</td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a+b=&#x27;</span>, a+b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a-b=&#x27;</span>, a-b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a*b=&#x27;</span>, a*b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a/b=&#x27;</span>, a/b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a%b=&#x27;</span>, a%b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a**b=&#x27;</span>, a**b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a//b=&#x27;</span>, a//b)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>+b= <span class="number">7</span></span><br><span class="line"><span class="attribute">a</span>-b= <span class="number">3</span></span><br><span class="line"><span class="attribute">a</span>*b= <span class="number">10</span></span><br><span class="line"><span class="attribute">a</span>/b= <span class="number">2</span>.<span class="number">5</span></span><br><span class="line"><span class="attribute">a</span>%b= <span class="number">1</span></span><br><span class="line"><span class="attribute">a</span>**b= <span class="number">25</span></span><br><span class="line"><span class="attribute">a</span>//b= <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="赋值运算符">赋值运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code> c = a + b</code></td>
<td>将a + b 的结果赋给c</td>
</tr>
<tr>
<td><code>a += b</code></td>
<td>等效于a = a + b</td>
</tr>
<tr>
<td><code>a -= b</code></td>
<td>等效于a = a - b</td>
</tr>
<tr>
<td><code>a *= b</code></td>
<td>等效于a = a * b</td>
</tr>
<tr>
<td><code>a /= b</code></td>
<td>等效于a = a / b</td>
</tr>
<tr>
<td><code>a %= b</code></td>
<td>等效于a = a % b</td>
</tr>
<tr>
<td><code>a **= b</code></td>
<td>等效于a = a ** b</td>
</tr>
<tr>
<td><code>a //= b</code></td>
<td>等效于a = a // b</td>
</tr>
</tbody>
</table>
<h3 id="比较运算符">比较运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a == b</code></td>
<td>比较a和b是否相等</td>
</tr>
<tr>
<td><code>a != b </code></td>
<td>比较a和b是否不相等</td>
</tr>
<tr>
<td><code>a &gt; b</code></td>
<td>比较a是否大于b</td>
</tr>
<tr>
<td><code>a &lt; b</code></td>
<td>比较a是否小于b</td>
</tr>
<tr>
<td><code>a &gt;= b</code></td>
<td>比较a是否大于等于b</td>
</tr>
<tr>
<td><code>a &lt;= b</code></td>
<td>比较a是否小于等于b</td>
</tr>
</tbody>
</table>
<h3 id="逻辑运算符">逻辑运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a and b</code></td>
<td>布尔“与”，如果a和b都为真，返回b的计算值，如果其中一个为假，返回false</td>
</tr>
<tr>
<td><code>a or b</code></td>
<td>布尔“或”，如果a非0，返回a的计算值，否则返回b的计算值</td>
</tr>
<tr>
<td><code>not a</code></td>
<td>布尔“非”，如果a为false，返回true，如果a为true，返回false</td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a and b:&#x27;</span>, a <span class="keyword">and</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a or b:&#x27;</span>, a <span class="keyword">or</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;not a:&#x27;</span>, <span class="keyword">not</span> a)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">and</span> <span class="selector-tag">b</span>: <span class="number">2</span></span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">or</span> <span class="selector-tag">b</span>: <span class="number">5</span></span><br><span class="line"><span class="selector-tag">not</span> <span class="selector-tag">a</span>: <span class="selector-tag">False</span></span><br></pre></td></tr></table></figure>
<h3 id="位运算符">位运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a &amp; b</code></td>
<td>按位与：相应位都是1，这个位结果为1，否则为0</td>
</tr>
<tr>
<td>`a</td>
<td>b`</td>
</tr>
<tr>
<td><code>a ^ b</code></td>
<td>异或：对应位不相同，结果为1</td>
</tr>
<tr>
<td><code>~ a</code></td>
<td>取反：把0变成1，把1变成0</td>
</tr>
<tr>
<td><code>a &lt;&lt; 2</code></td>
<td>左移：把二进制位全部左移2位，高位丢弃，低位补0</td>
</tr>
<tr>
<td><code>a &gt;&gt; 2</code></td>
<td>右移：把二进制位全部右移2位，低位丢弃，高位补0</td>
</tr>
<tr>
<td>例：</td>
<td></td>
</tr>
<tr>
<td>a = 5 ,b = 2则换成二进制 a = 0000 0101，b = 0000 0010</td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;按位与：&#x27;</span>, a &amp; b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;按位或：&#x27;</span>, a | b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;异或：&#x27;</span>, a ^ b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;取反:&#x27;</span>, ~ a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;左移：&#x27;</span>, a &lt;&lt; <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;右移：&#x27;</span>, a &gt;&gt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">按位与： 0</span><br><span class="line">按位或： 7</span><br><span class="line">异或： 7</span><br><span class="line"><span class="section">取反: -6</span></span><br><span class="line">左移： 20</span><br><span class="line">右移： 1</span><br></pre></td></tr></table></figure>
<p>!!!<br>
二进制中，采用最高位是符号位的方法区分正反，正数符号位是0，复数符号位是1。负数的以正值原码的补码形式表示。<br>
原码：绝对值转换成二进制<br>
反码：原码取反<br>
补码：反码加一<br>
比如：整数-1 的表示方法为，先取原码： 0000 0001 ，取反：1111 1110，加一得到补码：1111 1111<br>
二进制负数转十进制：先取反加1，转为十进制后加上负号。<br>
比如：~ a 的结果为1111 1010，从符号位看出是负数，取反：0000 0101，加一：0000 0110，十进制：4+2=6,即1111 1010表示的是-6。</p>
<h3 id="成员运算符">成员运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>in</code></td>
<td>如果在指定的序列中找到值，返回true</td>
</tr>
<tr>
<td><code>not in</code></td>
<td>如果在指定的序列中没有找到值，返回true</td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;变量a在列表中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;变量a不在列表中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b不在列表中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b在列表中&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">变量<span class="selector-tag">a</span>不在列表中</span><br><span class="line"><span class="selector-tag">b</span>在列表中</span><br></pre></td></tr></table></figure>
<h3 id="身份运算符">身份运算符</h3>
<p>python中对象有三个要素：id(身份标识)，type(数据类型)，value(值)。<code>is</code>和<code>is not</code>用来比较两个对象的标识符。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>is</code></td>
<td>判断两个标识符是不是引用自同一个对象</td>
</tr>
<tr>
<td><code>is not</code></td>
<td>判断两个标识符是不是来自不同的对象</td>
</tr>
</tbody>
</table>
<p>!!!<br>
<code>is</code>和<code>==</code>都是比较对象，区别在于<code>==</code>用来比较两个对象的value是否相等，is用来比较两个对象的id是否相等。</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">Python 3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x = y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">z = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x == y</span></span><br><span class="line">True</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x == z</span></span><br><span class="line">True</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x <span class="keyword">is</span> y</span></span><br><span class="line">True</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">x <span class="keyword">is</span> z</span></span><br><span class="line">False</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="built_in">print</span>(<span class="built_in">id</span>(x))</span></span><br><span class="line">2724391181248</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="built_in">print</span>(<span class="built_in">id</span>(y))</span></span><br><span class="line">2724391181248</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="built_in">print</span>(<span class="built_in">id</span>(z))</span></span><br><span class="line">2724373621952</span><br></pre></td></tr></table></figure>
<h3 id="运算符优先级">运算符优先级</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>按优先级排序（从高到低）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>**</code></td>
<td>指数</td>
</tr>
<tr>
<td><code>~</code></td>
<td>取反</td>
</tr>
<tr>
<td><code>*</code> <code>\</code> <code>%</code> <code>//</code></td>
<td>乘、除、取模、取整</td>
</tr>
<tr>
<td><code>+</code> <code>-</code></td>
<td>加、减</td>
</tr>
<tr>
<td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td>
<td>右移、左移</td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>按位与</td>
</tr>
<tr>
<td><code>^</code> `</td>
<td>`</td>
</tr>
<tr>
<td><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code></td>
<td>比较运算符</td>
</tr>
<tr>
<td><code>==</code> <code>!=</code></td>
<td>赋值运算符</td>
</tr>
<tr>
<td><code>is</code> <code>is not</code></td>
<td>身份运算符</td>
</tr>
<tr>
<td><code>in</code> <code>not in</code></td>
<td>成员运算符</td>
</tr>
<tr>
<td><code>not</code> <code>and</code> <code>or</code></td>
<td>逻辑运算符</td>
</tr>
</tbody>
</table>
<h2 id="循环语句">循环语句</h2>
<ul>
<li>while</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> expression:</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印数字1-10</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>for</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印九九乘法表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>): <span class="comment">#range()返回一个左闭右开的序列，即range(1,10)为[1,10)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;x&#123;&#125;=&#123;&#125;\t&#x27;</span>.<span class="built_in">format</span>(j, i, j*i), end=<span class="string">&#x27; &#x27;</span>)<span class="comment"># format控制输出格式，end参数可以取消在末尾输出回车，实现不换行</span></span><br><span class="line">    <span class="built_in">print</span>() <span class="comment"># 实现换行</span></span><br></pre></td></tr></table></figure>
<ul>
<li>break<br>
break用来终止循环。</li>
<li>continue<br>
continue用来跳过当前循环，然后继续进行下一轮循环。</li>
</ul>
<p>例如：约瑟夫生者死者游戏</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">30个人在一条船上，超载，需要15人下船。</span></span><br><span class="line"><span class="string">于是人们排成一排，排队的位置即他们的编号。</span></span><br><span class="line"><span class="string">从1开始报数，数到9的人下船，直到船上只有15人。</span></span><br><span class="line"><span class="string">哪些编号的人下船了？</span></span><br><span class="line"><span class="string">思路：</span></span><br><span class="line"><span class="string">30个人每个人进行编号，i代表每个人的编号，在船上的人记录为1，不在船上的记录为0</span></span><br><span class="line"><span class="string">使用check进行1-9报数，当check=9时，对应编号的人记录为0</span></span><br><span class="line"><span class="string">当i超过30时，手动置为1，不在船上的人等于15时，停止报数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">sailor = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>):</span><br><span class="line">    sailor[x] = <span class="number">1</span></span><br><span class="line">check = <span class="number">0</span>  <span class="comment"># 记录报数的1-9</span></span><br><span class="line">i = <span class="number">1</span>  <span class="comment"># 人的编号</span></span><br><span class="line">j = <span class="number">0</span>  <span class="comment"># 记录下船的人数</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">31</span>:</span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">15</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 当j等于15时，跳出循环</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">31</span>:</span><br><span class="line">        i = <span class="number">1</span>  <span class="comment"># 当i超过30时，手动置为1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> sailor[i] == <span class="number">0</span>:  <span class="comment"># 标记为0的在循环时跳过</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            check += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> check == <span class="number">9</span>:</span><br><span class="line">                sailor[i] = <span class="number">0</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;第&#123;&#125;人下船：编号为&#123;&#125;的人下船&#x27;</span>.<span class="built_in">format</span>(j, i))</span><br><span class="line">                check = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<h2 id="条件语句">条件语句</h2>
<ul>
<li>if…else</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断奇偶</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个数字：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;是偶数&quot;</span>.<span class="built_in">format</span>(num))</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;是奇数&quot;</span>.<span class="built_in">format</span>(num))</span><br></pre></td></tr></table></figure>
<ul>
<li>elif</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">elif</span> expression:</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
<ul>
<li>if…elif…else</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">elif</span> expression:</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
<p>例如：<br>
二分查找算法是在有序数组中查找某一个元素的算法。搜索先从数组的中间开始，如果中间正好是要查的元素，搜索结束；如果要搜的元素大于中间元素，就在大于中间元素的一半中查找，每次搜索范围缩小一半。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现二分查找</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">array, item, head, tail</span>):</span><br><span class="line">    <span class="keyword">if</span> tail &gt;= head:</span><br><span class="line">        mid = head + (tail - head) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> array[mid] == item:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> array[mid] &gt; item: <span class="comment"># 如果中间值大于要查找的值，返回前半部分</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;搜索结果：&#x27;</span>, array[head:mid])</span><br><span class="line">            <span class="keyword">return</span> binary_search(array, item, head, mid-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 否则返回后半部分</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;搜索结果：&#x27;</span>, array[mid+<span class="number">1</span>:tail+<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> binary_search(array, item, mid+<span class="number">1</span>, tail)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 查不到</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">41</span>, <span class="number">65</span>, <span class="number">80</span>]</span><br><span class="line">x = <span class="number">80</span></span><br><span class="line">result = binary_search(arr, x, <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> result != -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;元素的索引为：&#x27;</span>, result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;元素不在列表中！&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>math-case<br>
python 3.10以上版本支持match-case语句。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;patter_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">month = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入月份：&quot;</span>))</span><br><span class="line"><span class="keyword">match</span> month:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第一季度&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span> | <span class="number">5</span> | <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第二季度&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span> | <span class="number">8</span> | <span class="number">9</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第三季度&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span> | <span class="number">11</span> | <span class="number">12</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第四季度&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入的不是月份&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="pass语句">pass语句</h2>
<p>pass是空语句，不做任何事情，一般用来保持结构的完整。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 数据类型</title>
    <url>/posts/14743.html</url>
    <content><![CDATA[<h1>标准数据类型</h1>
<p>在python3中有6中标准数据类型：</p>
<ul>
<li>数字(number)</li>
<li>字符串(string)</li>
<li>列表(list)</li>
<li>元组(tuple)</li>
<li>字典(dictionary)</li>
<li>集合(set)</li>
</ul>
<p>其中不可变数据类型：数字、字符串、元组<br>
可变数据类型：列表、字典、集合</p>
<div class="note blue non-icon flat"><p>不可变数据类型：变量被声明后，变量的值和开辟的内存空间绑定，当变量被赋予新值时，会开辟一个新的内存空间。<br>
可变数据类型：变量中的值发生变化，内存地址不发生改变。</p>
</div>
<h2 id="数字">数字</h2>
<p>python3支持的数字类型为：int,float,bool,complex（复数）。</p>
<ul>
<li>int<br>
python中只有一种整数类型int，表示为长整型，没有long。int的取值范围在32位机器上是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，在64位中范围是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，如果超出这个部分，会自动将整型转成长整型。</li>
<li>float<br>
浮点数用来处理带小数的数字。浮点数有两种，一种是十进制，比如：5.18，100.0；另一种是指数形式，比如：5.18e2，表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5.18</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">5.18\times10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5.18</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。</li>
<li>bool<br>
布尔型可以用True和False表示，也可以用0和1表示，并且可以和整数相加。</li>
<li>complex<br>
复数存放的是1对浮点数，1个表示实数部分，一个表示虚数（跟随一个字母j)，可以使用 a + bj或者complex(a,b)表示。</li>
</ul>
<figure class="highlight python"><figcaption><span>Console>>> z </span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>z.real,z.imag</span><br><span class="line">(<span class="number">1.0</span>, <span class="number">2.0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="数字类型转换">数字类型转换</h3>
<ul>
<li>int(x) 将x转换为整数</li>
<li>float(x) 将x转换为浮点数</li>
<li>complex(x) 将x转换为复数，实数部分是x，虚数部分是0</li>
<li>complex(x, y) 转换为复数，实数部分是x，虚数部分是y</li>
</ul>
<h3 id="相关函数">相关函数</h3>
<ul>
<li>round(x, [n])：返回浮点数x，保留小数点后n位</li>
</ul>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="built_in">round</span>(<span class="number">3.123456</span>, <span class="number">2</span>)</span></span><br><span class="line">3.12</span><br></pre></td></tr></table></figure>
<ul>
<li>pow(x, y)：返回x的y次幂</li>
</ul>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">8</span>)</span></span><br><span class="line">256</span><br></pre></td></tr></table></figure>
<ul>
<li>random()：生成随机数，范围是[0, 1)</li>
</ul>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="keyword">import</span> random</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">random.random()</span></span><br><span class="line">0.09753534118255014</span><br></pre></td></tr></table></figure>
<ul>
<li>choice(seq)：从序列中随机挑选一个元素</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">list_a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(random.choice(list_a))</span><br></pre></td></tr></table></figure>
<h2 id="字符串">字符串</h2>
<p>创建字符串只需要给变量赋值，通过访问下标，可以截取字符串，语法格式为：变量[头下标:尾下标]。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">var1 = <span class="string">&quot;Hello,world!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(var1[<span class="number">2</span>:<span class="number">8</span>])</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">输出结果：`llo,wo`</span><br><span class="line"></span><br><span class="line">- 字符串拼接</span><br><span class="line">  直接用`+`拼接</span><br><span class="line">  通过`join()`拼接</span><br><span class="line">```py</span><br><span class="line">var1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">var2 = <span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(var2.join(var1))</span><br></pre></td></tr></table></figure>
<p>输出结果：<code>h,e,l,l,o</code></p>
<ul>
<li>f-string<br>
f-string格式化字符串以f开头，字符串中表达式以<code>&#123;&#125;</code>包起来，会将表达式计算后的值替换进去。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;x+<span class="number">1</span>=&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果： <code>x+1=2</code></p>
<h3 id="相关函数-2">相关函数</h3>
<p><code>capitalize()</code> 将字符串的第一个字母大写<br>
<code>find(str, beg=0, end=len(string)</code> 检查str是否包含在字符串中，如果包含返回索引值，否则返回-1<br>
<code>len(string)</code> 返回字符串的长度<br>
<code>join(seq)</code> 以指定字符串作为分隔符，合并为一个新的字符串<br>
<code>replace(old, new, [,n])</code> 将字符串中的old替换成new，替换不超过n次</p>
<h2 id="列表">列表</h2>
<p>列表是python中常见的数据结构，和java中的数组类似，都有索引和对应的值。</p>
<h3 id="创建列表">创建列表</h3>
<p>将不同的数据用逗号分隔，使用方括号括起来。<br>
例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list2 = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="访问列表的值">访问列表的值</h3>
<p>通过索引访问和截取列表。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>, <span class="string">&#x27;Saturday&#x27;</span>, <span class="string">&#x27;Sunday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">5</span>:<span class="number">7</span>])</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">Wednesday</span><br><span class="line"><span class="selector-attr">[<span class="string">&#x27;Saturday&#x27;</span>, <span class="string">&#x27;Sunday&#x27;</span>]</span></span><br></pre></td></tr></table></figure>
<h3 id="更新列表">更新列表</h3>
<p>可以通过索引直接修改列表中的数据项，使用append()方法给列表添加数据项。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line">list1[<span class="number">2</span>] = <span class="string">&#x27;green&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;修改后的列表为：&quot;</span>, list1)</span><br><span class="line">list1.append(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新后的列表为：&quot;</span>, list1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">修改后的列表为： <span class="selector-attr">[<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span></span><br><span class="line">更新后的列表为： <span class="selector-attr">[<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;black&#x27;</span>]</span></span><br></pre></td></tr></table></figure>
<h3 id="删除列表元素">删除列表元素</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除元素后的列表为：&quot;</span>, list1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">删除元素后的列表为： <span class="selector-attr">[<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span></span><br></pre></td></tr></table></figure>
<h3 id="其他相关函数">其他相关函数</h3>
<p><code>len(list)</code> 列表长度<br>
<code>list.append(obj)</code> 在列表末尾添加新的元素<br>
<code>list.remove(obj)</code> 移出列表中某一个值的元素<br>
<code>list.reverse()</code> 反向排列列表中的元素<br>
<code>list.sort()</code> 对列表进行排序<br>
<code>list.clear()</code> 清空列表</p>
<h2 id="元组">元组</h2>
<p>元组和列表类似，不同的是元组的元素不能修改。</p>
<h3 id="创建元组">创建元组</h3>
<p>使用<code>()</code>创建元组，元组中元素用逗号分隔。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tuple2 = (<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>元素中只有一个元素时，要在元素的后面加<code>,</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = (<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tuple1)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple2 = (<span class="number">50</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tuple2)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="访问元组">访问元组</h3>
<p>元组中元素的访问和列表类似。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>, <span class="string">&#x27;Saturday&#x27;</span>, <span class="string">&#x27;Sunday&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">5</span>:<span class="number">7</span>])</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">Wednesday</span><br><span class="line">(&#x27;Saturday&#x27;, &#x27;Sunday&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="修改元素">修改元素</h3>
<p>元组中的值不能被修改，但是可以对元组进行拼接。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>)</span><br><span class="line">tuple2 = (<span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>, <span class="string">&#x27;Saturday&#x27;</span>, <span class="string">&#x27;Sunday&#x27;</span>)</span><br><span class="line">tuple3 = tuple1 + tuple2</span><br><span class="line"><span class="built_in">print</span>(tuple3)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="symbol">&#x27;Monday</span>&#x27;, <span class="symbol">&#x27;Tuesday</span>&#x27;, <span class="symbol">&#x27;Wednesday</span>&#x27;, <span class="symbol">&#x27;Thursday</span>&#x27;, <span class="symbol">&#x27;Friday</span>&#x27;, <span class="symbol">&#x27;Saturday</span>&#x27;, <span class="symbol">&#x27;Sunday</span>&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="删除元组">删除元组</h3>
<p>元组中的元素值不能被删除，但是可以删除整个元组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> tuple1</span><br><span class="line"><span class="built_in">print</span>(tuple1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  File <span class="string">&quot;F:\code\pythonTest\main.py&quot;</span>, <span class="built_in">line</span> <span class="number">3</span>, in <span class="symbol">&lt;module&gt;</span></span><br><span class="line">    <span class="keyword">print</span>(tuple1)</span><br><span class="line">NameError: name <span class="string">&#x27;tuple1&#x27;</span> <span class="keyword">is</span> not defined. Did you mean: <span class="string">&#x27;tuple&#x27;</span>?</span><br></pre></td></tr></table></figure>
<h2 id="字典">字典</h2>
<h3 id="创建字典">创建字典</h3>
<p>字典的每个键值（key=&gt;value）使用<code>:</code>分隔，每一对之间使用逗号<code>,</code>分隔，每一个key是唯一的。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;Gender&#x27;</span>: <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Job&#x27;</span>: <span class="string">&#x27;barber&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="访问字典">访问字典</h3>
<p>通过字典中的key可以获取value值。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;Gender&#x27;</span>: <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Job&#x27;</span>: <span class="string">&#x27;barber&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>输出结果：<code>Tony</code></p>
<h3 id="修改字典">修改字典</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;Gender&#x27;</span>: <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Job&#x27;</span>: <span class="string">&#x27;barber&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原字典为：&quot;</span>, dict1)</span><br><span class="line">dict1[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;修改后的字典为：&quot;</span>, dict1)</span><br><span class="line">dict1[<span class="string">&#x27;Age&#x27;</span>] = <span class="string">&#x27;40&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新后的字典为：&quot;</span>, dict1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">原字典为： &#123;&#x27;name&#x27;: &#x27;Tony&#x27;, &#x27;Gender&#x27;: &#x27;Male&#x27;, &#x27;Job&#x27;: &#x27;barber&#x27;&#125;</span><br><span class="line">修改后的字典为： &#123;&#x27;name&#x27;: &#x27;Jack&#x27;, &#x27;Gender&#x27;: &#x27;Male&#x27;, &#x27;Job&#x27;: &#x27;barber&#x27;&#125;</span><br><span class="line">更新后的字典为： &#123;&#x27;name&#x27;: &#x27;Jack&#x27;, &#x27;Gender&#x27;: &#x27;Male&#x27;, &#x27;Job&#x27;: &#x27;barber&#x27;, &#x27;Age&#x27;: &#x27;40&#x27;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除字典元素">删除字典元素</h3>
<p>使用del()方法可以删除字典中的某一个键，或者删除整个字典。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;Gender&#x27;</span>: <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Job&#x27;</span>: <span class="string">&#x27;barber&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">40</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原字典为：&quot;</span>, dict1)</span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;Job&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;删除元素后的字典为：&quot;</span>, dict1)</span><br><span class="line">dict1.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;清空后的字典为：&quot;</span>, dict1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">原字典为： &#123;&#x27;Name&#x27;: &#x27;Tony&#x27;, &#x27;Gender&#x27;: &#x27;Male&#x27;, &#x27;Job&#x27;: &#x27;barber&#x27;, &#x27;Age&#x27;: <span class="number">40</span>&#125;</span><br><span class="line">删除元素后的字典为： &#123;&#x27;Name&#x27;: &#x27;Tony&#x27;, &#x27;Gender&#x27;: &#x27;Male&#x27;, &#x27;Age&#x27;: <span class="number">40</span>&#125;</span><br><span class="line">清空后的字典为： &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="遍历字典">遍历字典</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Tony&#x27;</span>, <span class="string">&#x27;Gender&#x27;</span>: <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Job&#x27;</span>: <span class="string">&#x27;barber&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">40</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Key:&quot;</span>, key, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Value:&quot;</span>, value)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Key:</span> Name Value: Tony</span><br><span class="line"><span class="symbol">Key:</span> Gender Value: Male</span><br><span class="line"><span class="symbol">Key:</span> Job Value: barber</span><br><span class="line"><span class="symbol">Key:</span> Age Value: <span class="number">40</span></span><br></pre></td></tr></table></figure>
<h2 id="集合">集合</h2>
<p>集合是一个无序的不重复元素的序列。</p>
<h3 id="创建集合">创建集合</h3>
<p>可以使用<code>&#123;&#125;</code>或者<code>set()</code>函数来创建集合。创建空集合必须使用<code>set()</code>，<code>&#123;&#125;</code>是用来创建空字典的。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 = <span class="built_in">set</span>(<span class="string">&#x27;helloworld&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;l&#x27;, &#x27;r&#x27;, &#x27;e&#x27;, &#x27;w&#x27;, &#x27;d&#x27;, &#x27;o&#x27;, &#x27;h&#x27;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加元素">添加元素</h3>
<p>使用add()或者update()函数可以往集合中添加元素。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line">set1.add(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;添加元素后的集合为：&quot;</span>, set1)</span><br><span class="line">set1.update(&#123;<span class="string">&#x27;blue&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;添加元素后的集合为：&quot;</span>, set1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">添加元素后的集合为： &#123;&#x27;green&#x27;, &#x27;red&#x27;, &#x27;yellow&#x27;&#125;</span><br><span class="line">添加元素后的集合为： &#123;&#x27;green&#x27;, &#x27;red&#x27;, &#x27;yellow&#x27;, &#x27;blue&#x27;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="移除元素">移除元素</h3>
<p>使用remove()或者discard()函数移除元素。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 =  &#123;<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>&#125;</span><br><span class="line">set1.remove(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除元素后的集合为：&quot;</span>, set1)</span><br><span class="line"><span class="comment"># discard()移除元素，如果元素不存在，不会发生报错</span></span><br><span class="line">set1.discard(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;移除元素后的集合为：&quot;</span>, set1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">移除元素后的集合为： &#123;&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;&#125;</span><br><span class="line">移除元素后的集合为： &#123;&#x27;blue&#x27;, &#x27;yellow&#x27;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他相关函数-2">其他相关函数</h3>
<p><code>len(s)</code> 返回集合中元素个数<br>
<code>s.clear()</code> 清空集合<br>
<code>x in s</code> 判断集合s中是否存在元素x</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 文件处理和多线程</title>
    <url>/posts/40722.html</url>
    <content><![CDATA[<h1>文件处理</h1>
<p><code>open(filename, mode)</code>返回一个file对象，filename包含了要访问的文件名称的字符串值，mode表示打开文件的模式（只读、写入、追加等），默认文件访问模式为只读。</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>r</code></td>
<td>以只读方式打开文件，文件的指针在文件的开头</td>
</tr>
<tr>
<td><code>rb</code></td>
<td>以二进制格式打开文件，文件只读，文件的指针在文件开头</td>
</tr>
<tr>
<td><code>r+</code></td>
<td>打开文件用于读写，文件的指针在文件的开头</td>
</tr>
<tr>
<td><code>rb+</code></td>
<td>以二进制格式打开文件用于读写，文件的指针在文件开头</td>
</tr>
<tr>
<td><code>w</code></td>
<td>打开一个文件只用于写入。如果文件已存在则打开文件，并从头开始编辑，原有内容删除，如果文件不存在，则创建新文件</td>
</tr>
<tr>
<td><code>wb</code></td>
<td>二进制格式打开文件，只用于写入</td>
</tr>
<tr>
<td><code>w+</code></td>
<td>打开文件用于读写。如果文件已存在则打开文件，并从头开始编辑，原有内容删除，如果文件不存在，则创建新文件</td>
</tr>
<tr>
<td><code>wb+</code></td>
<td>以二进制格式打开文件用于读写</td>
</tr>
<tr>
<td><code>a</code></td>
<td>打开一个文件用于追加。如果文件已存在，文件指针会放在文件的结尾，新的内容在原有内容之后，如果文件不存在则创建新文件</td>
</tr>
<tr>
<td><code>ab</code></td>
<td>以二进制格式打开文件，用于追加</td>
</tr>
<tr>
<td><code>a+</code></td>
<td>打开一个文件用于读写，文件打开时是追加模式</td>
</tr>
<tr>
<td><code>ab+</code></td>
<td>以二进制格式打开文件用于读写，文件打开时是追加模式</td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = f.read()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">f.close()  <span class="comment">#关闭打开的文件</span></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&quot;你好，世界！&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 追加内容</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&quot;hello,world!&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>为了避免异常退出时资源释放问题和忘记使用close方法产生的资源泄漏问题，可以使用<code>with...as</code>语句。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">str</span> = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>
<h1>多线程</h1>
<h2 id="创建线程">创建线程</h2>
<p>python中的线程有两种方式：函数或者类来包装线程对象，有两个模块可以创建线程：</p>
<ul>
<li><code>_thread</code>：提供低级别的、原始的线程以及一个简单的锁</li>
<li><code>threading</code>：除了<code>_thread</code>中的方法外，还提供其他方法：
<ul>
<li><code>threading.currentThread()</code>：返回当前的线程变量</li>
<li><code>threading.enumerate()</code>：返回一个包含正在运行的线程的list</li>
<li><code>threading.activeCount()</code>：返回正在运行的线程数量，与len(threading.enumerate())有相同的结果</li>
</ul>
</li>
</ul>
<p>除了线程模块外，还有Thread类可以处理线程：</p>
<ul>
<li><code>run()</code> 用来表示线程活动的方法</li>
<li><code>start()</code> 启动线程活动</li>
<li><code>join([time])</code> 等待至线程中止</li>
<li><code>isAlive()</code> 返回线程是否活动</li>
<li><code>getName()</code> 返回线程名</li>
<li><code>setName()</code> 设置线程名</li>
</ul>
<p>例：使用<code>_thread</code>模块创建线程<br>
<code>_thread</code>对于线程何时退出没有控制，当主线程结束时，其他线程也都结束。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_time</span>(<span class="params">threadName</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">        sleep(<span class="number">5</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s:%s&quot;</span> % (threadName, ctime(time.time())))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">_thread.start_new_thread(function, args[,kwargs]) 创建新线程</span></span><br><span class="line"><span class="string">function: 线程函数</span></span><br><span class="line"><span class="string">args: 传递给线程函数的参数，必须是个tuple类型</span></span><br><span class="line"><span class="string">kwargs: 可选参数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    _thread.start_new_thread(print_time, (<span class="string">&quot;Thread-1&quot;</span>,))</span><br><span class="line">    _thread.start_new_thread(print_time, (<span class="string">&quot;Thread-2&quot;</span>,))</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>例：使用<code>threading</code>模块创建线程<br>
<code>threading.Thread(group=None, target=None, name=None, args=(), kwargs=&#123;&#125;, *, daemon=None)</code><br>
<code>group</code>： 默认为None<br>
<code>target</code>: 默认为None，用于run()方法调用的可调用对象<br>
<code>name</code>: 线程名称，默认为&quot;Thread-N&quot;<br>
<code>args</code>: 调用目标函数的参数元祖<br>
<code>kwargs</code>: 调用目标函数的关键字参数字典<br>
<code>daemon</code>： 如果不是None,将显示地设置该线程是否为守护模式，如果是None,将继承当前线程的守护模式属性。需要在调用start之前设置好。</p>
<div class="note blue non-icon flat"><p>守护线程指的是在程序运行时，后台提供通用服务的线程。简单来说是一种服务线程，为普通用户线程提供服务。</p>
</div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">threadName</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s:%s&#x27;</span> % (threadName, time.ctime(time.time())))</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s:%s&#x27;</span> % (threadName, time.ctime(time.time())))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t1 = threading.Thread(target=test, args=(<span class="string">&quot;Thread-1&quot;</span>,))</span><br><span class="line">    t2 = threading.Thread(target=test, args=(<span class="string">&quot;Thread-2&quot;</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure>
<h2 id="线程同步">线程同步</h2>
<p>如果多个线程一起对某个数据进行修改，可能对数据造成破坏，为了保证数据正确，需要对线程添加锁，保证同一时间只有一个线程进行操作。<br>
使用Thread对象的Lock和RLock可以实现简单的的线程同步。</p>
<p><strong>锁函数</strong></p>
<ul>
<li>acquire(blocking=True, timeout=-1)<br>
可以阻塞或者非阻塞地获得锁。<br>
当blocking设置为True时，阻塞直到锁被释放，然后将锁锁定并返回True；blocking设置为False时，将不会发生阻塞。<br>
timeout设置为正值时，只要无法获得锁，将最多阻塞timeout设定的秒数，如果为-1，将无限等待。</li>
<li>release()<br>
释放一个锁。</li>
</ul>
<p><strong>threading.Lock()互斥锁</strong></p>
<p>一旦线程获得一个锁，会阻塞随后尝试获得锁的线程，直到这个锁被释放。</p>
<p><strong>threading.RLock()可重入锁</strong></p>
<p>互斥锁可以由任意线程释放，但是RLock必须由获取锁的同一个线程释放，并且要求解锁次数和加锁次数相同。可重入锁可以嵌套使用。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> (threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, threadID, name, delay</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = threadID</span><br><span class="line">        self.name = name</span><br><span class="line">        self.delay = delay</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开启线程： &quot;</span> + self.name)</span><br><span class="line">        <span class="comment"># 获取锁，用于线程同步</span></span><br><span class="line">        threadLock.acquire()</span><br><span class="line">        print_time(self.name, self.delay, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 释放锁，开启下一个线程</span></span><br><span class="line">        threadLock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_time</span>(<span class="params">threadName, delay, counter</span>):</span><br><span class="line">    <span class="keyword">while</span> counter:</span><br><span class="line">        time.sleep(delay)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s: %s&quot;</span> % (threadName, time.ctime(time.time())))</span><br><span class="line">        counter -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threadLock = threading.Lock()</span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新线程</span></span><br><span class="line">thread1 = MyThread(<span class="number">1</span>, <span class="string">&quot;Thread-1&quot;</span>, <span class="number">1</span>)</span><br><span class="line">thread2 = MyThread(<span class="number">2</span>, <span class="string">&quot;Thread-2&quot;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启新线程</span></span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加线程到线程列表</span></span><br><span class="line">threads.append(thread1)</span><br><span class="line">threads.append(thread2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有线程完成</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;退出主线程&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python练习题（一）</title>
    <url>/posts/22184.html</url>
    <content><![CDATA[<h3 id="题一">题一</h3>
<p>找出小于1000的正整数中，是3或5的倍数的数，并计算其和，例如:小于10中，3或5的倍数的数有3、6、5、9，和是23。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> i % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">sum</span> += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">1000</span>))</span><br></pre></td></tr></table></figure>
<h3 id="题二">题二</h3>
<p>求600851475143的质因数。</p>
<div class="note blue non-icon flat"><p>质因数（素因数或质因子）在数论里是指能整除给定正整数的质数。除了1以外，两个没有其他共同质因子的正整数称为互质。因为1没有质因子，1与任何正整数（包括1本身）都是互质。正整数的因数分解可将正整数表示为一连串的质因子相乘，质因子如重复可以指数表示。根据算术基本定理，任何正整数皆有独一无二的质因子分解式。只有一个质因子的正整数为质数。如：13195的质因数是5、7、13、2。</p>
</div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">寻找质因数的方法：</span></span><br><span class="line"><span class="string">1. 先用除数除以一个能被它除尽的质数</span></span><br><span class="line"><span class="string">2. 以此类推，直到商是质数为止</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否是质数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d =&quot;</span> % n, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    signal = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> signal:  <span class="comment"># 当signal为1，一直while循环</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n + <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> is_prime(i):  <span class="comment"># 从2开始循环，如果i是质数，计算n/i是否能整除</span></span><br><span class="line">                <span class="keyword">if</span> n % i == <span class="number">0</span>:  <span class="comment"># 如果n能被i整除，说明i是质因数之一，打印i</span></span><br><span class="line">                    <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> n == i:  <span class="comment"># 如果n和i相等，说明已经除尽了，将signal置为0，跳出while循环</span></span><br><span class="line">                        signal = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="comment"># 如果n和i不相等，说明没有除尽，将n/i的商作为新的数，继续找新数的质因数</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;x&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">                    n /= i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find_prime(<span class="number">600851475143</span>)</span><br></pre></td></tr></table></figure>
<h3 id="题三">题三</h3>
<p>0~9这10个数字可以组成多少不重复的三位数？</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numbers = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    a = i // <span class="number">100</span>  <span class="comment"># 百位数</span></span><br><span class="line">    b = (i % <span class="number">100</span>) // <span class="number">10</span>  <span class="comment"># 十位数</span></span><br><span class="line">    c = i % <span class="number">10</span>  <span class="comment"># 个位数</span></span><br><span class="line">    <span class="keyword">if</span> a != b <span class="keyword">and</span> b != c <span class="keyword">and</span> c != a:</span><br><span class="line">        numbers.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(numbers))</span><br></pre></td></tr></table></figure>
<h3 id="题四">题四</h3>
<p>水仙花数是指一个n位数（n≥3），它的每个位上的数字的n次幂之和等于它本身。 例如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>1</mn><mn>3</mn></msup><mo>+</mo><msup><mn>5</mn><mn>3</mn></msup><mo>+</mo><msup><mn>3</mn><mn>3</mn></msup><mo>=</mo><mn>153</mn></mrow><annotation encoding="application/x-tex">1^3+5^3+3^3=153</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">153</span></span></span></span>。<br>
求100~999之间所有的水仙花数。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">100~999之间的水仙花数，即n=3</span></span><br><span class="line"><span class="string">也即如果一个数字是xyz,满足x^3+y^3+z^3=xyz则是水仙花数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_narcissus</span>(<span class="params">n</span>):</span><br><span class="line">    x = n // <span class="number">100</span>  <span class="comment"># 百位数</span></span><br><span class="line">    y = (n % <span class="number">100</span>) // <span class="number">10</span>  <span class="comment"># 十位数</span></span><br><span class="line">    z = n % <span class="number">10</span>  <span class="comment"># 个位数</span></span><br><span class="line">    result = <span class="built_in">pow</span>(x, <span class="number">3</span>) + <span class="built_in">pow</span>(y, <span class="number">3</span>) + <span class="built_in">pow</span>(z, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> n == result:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> is_narcissus(i):</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="题五">题五</h3>
<p>输入某年某月某日，判断这一天是这一年的第几天？</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">判断输入的日期的一年的第几天：</span></span><br><span class="line"><span class="string">1. 需要知道每个月有多少天</span></span><br><span class="line"><span class="string">2. 需要判断是否闰年，确定2月有多少天</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否闰年</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_leap_year</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断每个月有多少天</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">days_per_month</span>(<span class="params">y</span>):</span><br><span class="line">    list_days = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>,</span><br><span class="line">                 <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    <span class="keyword">if</span> is_leap_year(y):</span><br><span class="line">        list_days[<span class="number">1</span>] = <span class="number">29</span></span><br><span class="line">    <span class="keyword">return</span> list_days</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入年：&quot;</span>))</span><br><span class="line">month = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入月：&quot;</span>))</span><br><span class="line">day = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入日：&quot;</span>))</span><br><span class="line">days = days_per_month(year)</span><br><span class="line"><span class="keyword">if</span> day &gt; days[month-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;年&#123;&#125;月没有&#123;&#125;号!&quot;</span>.<span class="built_in">format</span>(year, month, day))</span><br><span class="line">    sys.exit()</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, month-<span class="number">1</span>):</span><br><span class="line">    count += days[i]</span><br><span class="line">count += day</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;年&#123;&#125;月&#123;&#125;日是这一年的第&#123;&#125;天&quot;</span>.<span class="built_in">format</span>(year, month, day, count))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="题六">题六</h3>
<p>随机选择一个三位以内的自然数作为答案。用户输入一个数字，程序会提示大了或是小了，直到用户猜中。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">number = <span class="number">0</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;猜数游戏，请输入数字：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> number &gt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你输入的数字比答案大:-(&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &lt; answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你输入的数字比答案小:-(&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;恭喜你猜中了！:-)&quot;</span>)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 闭包和装饰器</title>
    <url>/posts/25954.html</url>
    <content><![CDATA[<h1>命名空间和作用域</h1>
<p>命名空间是名称到对象的映射，命名空间避免了在项目中名称冲突，不同的命名空间是独立的，没有任何关系。命名空间中不能有重名，但不同的命名空间可以重名。<br>
python中有三种命名空间：</p>
<ul>
<li>内置名称(Built-in names): python语言内置的名称，比如char、Exception</li>
<li>全局名称(global names): 模块中定义的名称，记录了模块的变量、函数、类、其他导入的模块、模块级的变量和常量</li>
<li>局部名称(local names): 函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量</li>
</ul>
<p>命名空间查找顺序： 局部的命名空间-&gt;全局的命名空间-&gt;内置命名空间</p>
<img src="/posts/25954/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png" class="" title="This is an image">
<p>作用域是可以直接访问命名空间的正文区域，在python中，访问一个变量，会从内到外依次访问所有的作用域直到找到。<br>
python中有四种作用域：</p>
<ul>
<li>L(Local):最内层，包含局部变量，比如一个函数/方法内部</li>
<li>E(Enclosing):包含了非局部也非全局的变量，比如两个嵌套函数，函数A里面包含了函数B，对于B来说A的作用域为非局部</li>
<li>G(Global): 当前脚本的最外层，比如当前模块的全局变量</li>
<li>B(Built-in):包含了内置的变量、关键字<br>
作用域的访问顺序：L-&gt;E-&gt;G-&gt;B</li>
</ul>
<img src="/posts/25954/%E4%BD%9C%E7%94%A8%E5%9F%9F.png" class="" title="This is an image">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">g_count = <span class="number">0</span> <span class="comment"># 全局(global)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out</span>():</span><br><span class="line">    e_count = <span class="number">1</span> <span class="comment"># 闭包函数外的函数(enclosing)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        i_count = <span class="number">2</span> <span class="comment">#局部(local)</span></span><br></pre></td></tr></table></figure>
<h1>闭包</h1>
<p>在一个内部函数中，==对外部作用域的变量进行引用，并且外部函数的返回值为内部函数==，内部函数就被认为是闭包：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>
<p>闭包的作用：闭包可以避免使用全局变量，并提供数据隐藏。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer_func</span>():</span><br><span class="line">    loc_list = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_func</span>(<span class="params">name</span>):</span><br><span class="line">        loc_list.append(<span class="built_in">len</span>(loc_list) + <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s loc_list = %s&#x27;</span> % (name, loc_list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clo_func_0 = outer_func()</span><br><span class="line">clo_func_0(<span class="string">&#x27;clo_func_0&#x27;</span>)</span><br><span class="line">clo_func_0(<span class="string">&#x27;clo_func_0&#x27;</span>)</span><br><span class="line">clo_func_0(<span class="string">&#x27;clo_func_0&#x27;</span>)</span><br><span class="line">clo_func_1 = outer_func()</span><br><span class="line">clo_func_1(<span class="string">&#x27;clo_func_1&#x27;</span>)</span><br><span class="line">clo_func_0(<span class="string">&#x27;clo_func_0&#x27;</span>)</span><br><span class="line">clo_func_1(<span class="string">&#x27;clo_func_1&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">clo_func_0</span> loc_list =<span class="meta"> [1]</span></span><br><span class="line"><span class="attribute">clo_func_0</span> loc_list =<span class="meta"> [1, 2]</span></span><br><span class="line"><span class="attribute">clo_func_0</span> loc_list =<span class="meta"> [1, 2, 3]</span></span><br><span class="line"><span class="attribute">clo_func_1</span> loc_list =<span class="meta"> [1]</span></span><br><span class="line"><span class="attribute">clo_func_0</span> loc_list =<span class="meta"> [1, 2, 3, 4]</span></span><br><span class="line"><span class="attribute">clo_func_1</span> loc_list =<span class="meta"> [1, 2]</span></span><br></pre></td></tr></table></figure>
<p>在上面的这个例子中，分别定义了闭包实例<code>clo_func_0</code>和<code>clo_func_1</code>，<code>inner_func</code>实现的是获取列表的长度，并加1，将这个值作为新的元素添加到列表中，所以第12、13、14行分别打印了列表，可以看出==闭包实例对loc_list的修改会被传递到下一次闭包实例的调用==。第16、17、18行，<code>clo_func_0</code>和<code>clo_func_1</code>穿插调用闭包，可以看出==闭包实例之间对loc_list的修改互不干扰==。<br>
错误使用闭包的例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>(<span class="params">*args</span>):</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">            <span class="keyword">return</span> i * i</span><br><span class="line">        fs.append(func)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs1, fs2, fs3 = my_func()</span><br><span class="line"><span class="built_in">print</span>(fs1())</span><br><span class="line"><span class="built_in">print</span>(fs2())</span><br><span class="line"><span class="built_in">print</span>(fs3())</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p>理想的情况是输出0，1，4，实际结果都是4。my_func中返回的不是闭包函数，而是包含闭包函数的list。通过debug看出fs1, fs2, fs3 = my_func()调用my_func()函数，在返回fs之前，fs是一个包含三个闭包函数的list，i的值为2。fs1，fs2，fs3的值分别为fs这个list中的三个闭包函数，print(fs1())调用func函数，打印func的返回值，此时i已经变为了2，所以输出结果为4，print(fs2())，print(fs3()) 也是相同的结果。<br>
要想最终输出结果为0，1，4，可以修改为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>(<span class="params">*args</span>):</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">j=i</span>):</span><br><span class="line">            <span class="keyword">return</span> j * j</span><br><span class="line">        fs.append(func)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs1, fs2, fs3 = my_func()</span><br><span class="line"><span class="built_in">print</span>(fs1())</span><br><span class="line"><span class="built_in">print</span>(fs2())</span><br><span class="line"><span class="built_in">print</span>(fs3())</span><br></pre></td></tr></table></figure>
<p>修改的方法就是定义一个函数的形参j，==闭包函数中避免使用循环变量==，对函数形参的赋值会保留在当前函数的定义中，不会对其他函数有影响。</p>
<h1>装饰器</h1>
<h2 id="简单装饰器">简单装饰器</h2>
<p>装饰器就是一种闭包，使用装饰器可以让代码更简洁。<br>
比如想要打印一个函数的执行日志，在没有装饰器的时候写成：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_logging</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello,world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func_logging(hello)</span><br></pre></td></tr></table></figure>
<p>此种方法导致每次都要将一个函数作为参数传递给func_logging函数，而我们更希望的是能在执行的时候可以直接执行<code>hello()</code>，而不是使用<code>func_logging(hello)</code>，利用装饰器可以很好的解决这个问题。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_logging</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s is running&quot;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@func_logging</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello,world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@func_logging</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bye</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Goodbye!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line">bye()</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hello <span class="keyword">is</span> <span class="built_in">running</span></span><br><span class="line">Hello,world!</span><br><span class="line">bye <span class="keyword">is</span> <span class="built_in">running</span></span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure>
<p>加上装饰器之后，真正的业务方法被装饰器包裹，直接调用hello()可以获得想要的结果。</p>
<h2 id="带参数的装饰器">带参数的装饰器</h2>
<p>装饰器比较灵活，在使用装饰器时还可以带参数，如<code>@decorator(a)</code>。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_logging</span>(<span class="params">level=<span class="string">&#x27;info&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">match</span> level: <span class="comment"># 3.10+版本可以使用match-case，比if-elif-else更优雅</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;info&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[INFO]%s is running&quot;</span> % func.__name__)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;warn&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[WARN]%s is running&quot;</span> % func.__name__)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;debug&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[DEBUG]%s is running&quot;</span> % func.__name__)</span><br><span class="line">                <span class="keyword">case</span> _:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[INFO]%s is running&quot;</span> % func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@func_logging(<span class="params">level=<span class="string">&#x27;warn&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello,world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@func_logging()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bye</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Goodbye!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line">bye()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="类装饰器">类装饰器</h2>
<p>上面例子中的装饰器都是函数装饰器，类也可以用来构建装饰器，而且相比于函数装饰器，类装饰器更加灵活、封装性好。类装饰器可以利用类内部的<code>__call__()</code>方法，当将装饰器附加到函数上时，会调用此方法。如果使用类装饰器修改上面的例子，可以修改为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">func_logging</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, level=<span class="literal">None</span></span>):</span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">match</span> self.level:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;info&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[INFO]%s is running&quot;</span> % func.__name__)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;warn&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[WARN]%s is running&quot;</span> % func.__name__)</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;debug&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[DEBUG]%s is running&quot;</span> % func.__name__)</span><br><span class="line">                <span class="keyword">case</span> _:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[INFO]%s is running&quot;</span> % func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@func_logging(<span class="params">level=<span class="string">&#x27;warn&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello,world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@func_logging()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bye</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Goodbye!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line">bye()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="装饰器的顺序">装饰器的顺序</h2>
<p>函数上可以叠加多个装饰器，比如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@a</span></span><br><span class="line"><span class="meta">@b</span></span><br><span class="line"><span class="meta">@c</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    [statement]</span><br></pre></td></tr></table></figure>
<p>等效于</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">f</span> = <span class="function"><span class="title">a</span>(<span class="title">b</span>(<span class="title">c</span>(<span class="variable">f</span>)))</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 面向对象</title>
    <url>/posts/182.html</url>
    <content><![CDATA[<h1>函数</h1>
<h2 id="定义函数">定义函数</h2>
<p>定义函数使用<code>def</code>关键字，格式为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">[args,]</span>):</span><br><span class="line">    function_suite</span><br><span class="line">    <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compare</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure>
<h2 id="调用函数">调用函数</h2>
<p>定义函数后，可以调用函数。比如上面的函数可以这样调用<code>compare(5, 10)</code>。<br>
在调用函数时，可以向函数传递参数，调用函数时可以使用的参数类型为：必需参数、关键字参数、默认参数、不定长参数。</p>
<ul>
<li>必需参数<br>
在调用函数时，函数定义时有多少参数，在调用时就传递多少参数。下面的例子，在传递参数时少传了一个参数，执行时会报错<code>TypeError: compare() missing 1 required positional argument: 'y'</code>。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compare</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(compare(<span class="number">5</span>, ))</span><br></pre></td></tr></table></figure>
<ul>
<li>关键字参数<br>
使用关键字参数，可以确定传入的参数值，这样可以使得函数调用时参数的顺序和声明的不一致。比如：</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">def</span> <span class="title function_">compare</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(compare(y=<span class="number">5</span>, x=<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li>默认参数<br>
调用函数时，如果没有传递参数，会使用默认参数。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">x, y=<span class="number">10</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x=&quot;</span>, x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y=&quot;</span>, y)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_info(x=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>上面的例子中没有传入参数y，所以函数会使用函数定义时y的默认值，所以输出结果为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x= <span class="number">5</span></span><br><span class="line">y= <span class="number">10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不定长参数<br>
如果调用函数时，需要传递的参数比函数定义时声明的参数更多，可以用<code>*</code>修饰参数。加了<code>*</code>的参数，会以元组的形式传入。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">[args,], *args_tuple</span>):</span><br><span class="line">    function_suite</span><br><span class="line">    <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">a, *b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_info(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>如果函数定义时声明的参数带了两个星号<code>**</code>，参数会以字典的形式传入。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">[args,], **args_dict</span>):</span><br><span class="line">    function_suite</span><br><span class="line">    <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">a, **b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_info(<span class="number">1</span>, name=<span class="string">&#x27;mark&#x27;</span>, age=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>需要注意的是，因为参数以字典形式导入，在调用函数时，需要指定字典的key和value。<br>
输出结果为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;mark&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匿名函数">匿名函数</h2>
<p>python使用<code>lambda</code>来创建匿名函数。<br>
<code>lambda</code>的主体是一个表达式，比<code>def</code>要简单很多, lamba可用于定义简单的计算，让代码更简洁。格式为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1[, arg2, arg3,...]]:expression</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>等效于：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<h1>迭代器和生成器</h1>
<h2 id="迭代器">迭代器</h2>
<p>迭代器是可迭代的对象，可以遍历所有值，包含方法<code>__iter__()</code>和<code>__next__()</code>。迭代器从第一个元素开始访问，直到所有的元素被访问完结束，迭代器只能往前不能后退。<br>
列表、元组、字典、集合都是可迭代的对象，这些对象都有用于获取迭代器的<code>iter()</code>方法。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fruits = (<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>)</span><br><span class="line">fruit_iter = <span class="built_in">iter</span>(fruits) <span class="comment"># 创建迭代器</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> fruit_iter: <span class="comment"># 用for循环遍历迭代器对象</span></span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">apple pear cherry </span><br></pre></td></tr></table></figure>
<p>也可以使用<code>next()</code>方法。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">fruits = (<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>)</span><br><span class="line">fruit_iter = <span class="built_in">iter</span>(fruits)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">next</span>(fruit_iter), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration: <span class="comment"># StopIteration标识迭代的完成，防止无限循环</span></span><br><span class="line">        sys.exit() <span class="comment"># 退出程序</span></span><br></pre></td></tr></table></figure>
<p>如果要把一个类作为迭代器使用，需要在类中实现<code>__iter__()</code>和<code>__next__()</code>两个方法。<br>
<code>__iter__()</code>方法可以进行初始化的操作，但必须始终返回迭代器本身。<br>
<code>__next__()</code>方法实现迭代需要做的操作</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumbers</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.a &lt;= <span class="number">5</span>:</span><br><span class="line">            x = self.a</span><br><span class="line">            self.a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration <span class="comment"># 如果迭代完成指定的次数，添加终止条件引发错误，终止迭代</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">numbers = MyNumbers()</span><br><span class="line">myiter = <span class="built_in">iter</span>(numbers)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myiter:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="生成器">生成器</h2>
<p>python中使用了yield 的函数是生成器。生成器是一个返回迭代器的函数，在调用生成器运行的过程中，遇到yield时，函数会暂停并保存当前运行的信息，返回yield的值，并在下一次执行next()方法时从当前位置继续进行。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;generator&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;res:&quot;</span>, res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_gen = foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;first:&quot;</span>, <span class="built_in">next</span>(my_gen))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;second:&quot;</span>, <span class="built_in">next</span>(my_gen))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;send返回：&quot;</span>, my_gen.send(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">generator</span><br><span class="line">first: <span class="number">2</span></span><br><span class="line">====================</span><br><span class="line">res: <span class="literal">None</span></span><br><span class="line">second: <span class="number">2</span></span><br><span class="line">res: <span class="number">3</span></span><br><span class="line">send返回： <span class="number">2</span></span><br></pre></td></tr></table></figure>
<ol>
<li>foo函数中因为有yield关键字，首先不执行foo函数，生成一个生成器<br>
<img src="https://bed.cdpt.pro/ibed/2022/05/19/EgQw7Vx5c.png" alt="image.png"></li>
<li>next(my_gen)执行next方法，foo函数开始执行，先执行print（对应输出结果的第一行：<code>generator</code>），然后进入while循环</li>
<li>遇到yield关键字，yield给next(my_gen)返回了一个2（对应输出结果的第二行: <code>first: 2</code>）</li>
<li>执行完之后，foo函数暂停执行，先执行了print(“=”*20)</li>
<li>第二次执行next方法时从第一次的结果继续执行，因为第一次yield没有给res返回值，所以res为None，接着继续执行foo函数，打印res（对应输出结果的第四行: <code>res=None</code>）</li>
<li>while的条件是永真，继续执行foo函数，进入while循环，遇到yield，yield返回2，暂停执行foo, 输出第五行<code>second: 2</code></li>
<li>暂停执行foo，执行my_gen.send(3)，yield被当做一个整体赋值传给res，此时res=3，继续往后执行，输出<code>res: 3</code></li>
<li>再进入while，遇到yield，返回2后停止执行</li>
</ol>
<p>再看一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Gene</span>():  <span class="comment"># 生成器函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    first = <span class="keyword">yield</span> <span class="number">50</span>  <span class="comment"># 这里就是send函数的关键</span></span><br><span class="line">    <span class="comment"># send所传递的值其实就是给 =号左边的左值赋值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;first:&#x27;</span>, first)</span><br><span class="line"></span><br><span class="line">    second = <span class="keyword">yield</span> x  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;second:&#x27;</span>, second)</span><br><span class="line"></span><br><span class="line">    z = <span class="string">&#x27;third&#x27;</span></span><br><span class="line">    third = <span class="keyword">yield</span> z</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;third:&#x27;</span>, third)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inst = Gene()  <span class="comment"># 创建生成器对象</span></span><br><span class="line">output1 = inst.send(<span class="literal">None</span>)  <span class="comment"># 启动生成器，运行到第一个yield</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output1&#x27;</span>, output1)  <span class="comment"># 这边的output1获得的是yield的返回值 50</span></span><br><span class="line">output2 = inst.send(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output2&#x27;</span>, output2)</span><br><span class="line">output3 = inst.send(<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output3&#x27;</span>, output3)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ok</span><br><span class="line"><span class="number">100</span></span><br><span class="line">output1 <span class="number">50</span></span><br><span class="line">first: <span class="number">30</span></span><br><span class="line">output2 <span class="number">100</span></span><br><span class="line">second: <span class="literal">None</span></span><br><span class="line">output3 third</span><br></pre></td></tr></table></figure>
<ol>
<li>创建生成器后，<code>inst.send(None)</code>启动生成器，开始执行Gene()函数，先打印<code>ok</code>和<code>100</code></li>
<li>遇到yield关键字，send没有传参，yield返回50，暂停执行Gene()函数，yield返回值赋给output1, 打印<code>output1 50</code></li>
<li><code>inst.send(30)</code>赋值给first，继续执行，打印<code>first: 30</code>，再遇到yield，yield返回100，暂停执行Gene()函数，yield返回值赋给output2, 打印<code>output2 100</code></li>
<li>执行<code>inst.send(None)</code>，从second那一行执行，second没有被赋值，所以second是None，打印<code>second: None</code></li>
<li>继续执行遇到yield，yield 返回third，yield返回值赋给output3, 打印<code>output3 third</code></li>
</ol>
<p>使用生成器生成斐波那契数列：<br>
斐波那契数列为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_n=a_{n-1}+a_{n-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">        a, b = b, b+a</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = fibonacci(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">next</span>(f), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h1>错误和异常</h1>
<h2 id="异常处理">异常处理</h2>
<p>python语法错误成为解析错。如果语法是正确的，运行的时候发生错误，称为异常。<br>
异常捕捉可以使用<code>try...except...</code>语句，语法结构为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>：</span><br><span class="line">    执行代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    发生异常时执行的代码</span><br></pre></td></tr></table></figure>
<p><code>try...except...</code>还有可选的<code>else</code>子句，语法为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    执行代码</span><br><span class="line">except:</span><br><span class="line">    发生异常时执行的代码</span><br><span class="line">else:</span><br><span class="line">    没有异常时执行的代码</span><br></pre></td></tr></table></figure>
<p><code>try...except...</code>还有<code>finally</code>子句，语法为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    执行代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    发生异常时执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有异常时执行的代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    不管有没有异常都会执行的代码</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">division</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = a / b</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;0不能被作为除数&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;/&#123;&#125;=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(a, b, result))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;/&#123;&#125;计算结束&quot;</span>.<span class="built_in">format</span>(a, b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">division(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">division(<span class="number">4</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">0</span>不能被作为除数</span><br><span class="line"><span class="attribute">2</span>/<span class="number">0</span>计算结束</span><br><span class="line"><span class="attribute">4</span>/<span class="number">2</span>=<span class="number">2</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">4</span>/<span class="number">2</span>计算结束</span><br></pre></td></tr></table></figure>
<p>上面的例子中函数执行除法，如果除数为0，抛出<code>ZeroDivisionError</code>，则打印“0不能作为除数”，如果没有异常，打印出除法的结果。<br>
另外有一些对象预定义了清理行为（finally子句），当不需要的时候，标准的清理行为就会执行。<br>
例如：<code>with</code>关键字中封装了<code>try...except...finally</code>。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)<span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    read_data = f.read()</span><br><span class="line">    <span class="built_in">print</span>(read_data)</span><br></pre></td></tr></table></figure>
<p>使用with关键字之后，当文件使用完之后，会自动调用f.close()方法，关闭文件。</p>
<h2 id="抛出异常">抛出异常</h2>
<p>python使用raise语句抛出指定的异常。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;x的值不能大于1，当前x的值为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x))</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Traceback (most recent <span class="keyword">call</span> last):</span><br><span class="line">  File &quot;F:\code\pythonTest\main.py&quot;, <span class="type">line</span> <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> <span class="keyword">Exception</span>(&quot;x的值不能大于1，当前x的值为&#123;&#125;&quot;.format(x))</span><br><span class="line"><span class="keyword">Exception</span>: x的值不能大于<span class="number">1</span>，当前x的值为<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h1>面向对象</h1>
<p><code>类</code> 具有相同属性和方法的对象的集合，对象是类的实例<br>
<code>方法</code> 类中定义的函数<br>
<code>重写</code> 如果从父类继承的方法不能满足子类的需求，子类可以重写（override）方法，对父类的方法进行覆盖，重写除了方法体和实现方法不同，参数和返回类型需要和父类一致，访问修饰符要大于父类的权限<br>
<code>继承</code> 一个派生类继承基类的方法</p>
<h2 id="类定义">类定义</h2>
<p>使用<code>class</code>关键字定义一个类，例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Killer</span>:</span><br><span class="line">    eye_color = <span class="string">&#x27;brown&#x27;</span></span><br><span class="line">    cloths_color = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weapon</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;sword&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化类</span></span><br><span class="line">Bill = Killer()</span><br><span class="line"><span class="comment"># 访问类的属性和方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bill&#x27;s eys color:&quot;</span>, Bill.eye_color)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bill&#x27;s cloths color:&quot;</span>, Bill.cloths_color)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bill&#x27;s weapon:&quot;</span>, Bill.weapon())</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Bill&#x27;s </span>eys color: <span class="keyword">brown</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Bill&#x27;s </span><span class="keyword">cloths </span>color: <span class="keyword">blue</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Bill&#x27;s </span>weapon: <span class="keyword">sword</span></span><br></pre></td></tr></table></figure>
<p>类中有一个__init__()方法作为构造方法，在类实例化时自动调用，比如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Killer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.eye_color = <span class="string">&#x27;brown&#x27;</span></span><br><span class="line">        self.cloths_color = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weapon</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;sword&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化类</span></span><br><span class="line">Bill = Killer()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bill&#x27;s eys color:&quot;</span>, Bill.eye_color)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bill&#x27;s cloths color:&quot;</span>, Bill.cloths_color)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Bill&#x27;s weapon:&quot;</span>, Bill.weapon())</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Bill&#x27;s </span>eys color: <span class="keyword">brown</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Bill&#x27;s </span><span class="keyword">cloths </span>color: <span class="keyword">blue</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Bill&#x27;s </span>weapon: <span class="keyword">sword</span></span><br></pre></td></tr></table></figure>
<p>类中的每一个方法都会带self参数，self代表类的实例。</p>
<h2 id="继承">继承</h2>
<h3 id="单继承">单继承</h3>
<p>语法为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(<span class="title class_ inherited__">BaseClassName</span>):</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>
<p>子类（派生类DerivedClassName)会继承父类（基类BaseClassName）的属性和方法。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 定义私有属性，私有属性在类外部不能直接进行访问</span></span><br><span class="line">    __job = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, j</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__job = j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;说：我&#123;&#125;岁。&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Interviewee</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    hobby = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, j, h</span>):</span><br><span class="line">        <span class="comment"># 调用父类的构造函数</span></span><br><span class="line">        People.__init__(self, n, a, j)</span><br><span class="line">        self.hobby = h</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s说：我%d岁，兴趣是%s&quot;</span> % (self.name, self.age, self.hobby))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Jack = Interviewee(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;engineer&#x27;</span>, <span class="string">&#x27;play games&#x27;</span>)</span><br><span class="line">Jack.introduce()</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Jack</span>说：我<span class="number">30</span>岁，兴趣是play games</span><br></pre></td></tr></table></figure>
<h3 id="多继承">多继承</h3>
<p>python的子类也可以继承多个父类：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(Base1, Base2, Base3):</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>
<p>如果父类中有相同的方法名，子类在使用时未指定，python会按照从左到右的顺序搜索方法。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 定义私有属性，私有属性在类外部不能直接进行访问</span></span><br><span class="line">    __job = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, j</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__job = j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;说：我&#123;&#125;岁。&quot;</span>.<span class="built_in">format</span>(self.name, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Passerby</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    hobby = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, j, h</span>):</span><br><span class="line">        <span class="comment"># 调用父类的构造函数</span></span><br><span class="line">        People.__init__(self, n, a, j)</span><br><span class="line">        self.hobby = h</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s说：我%d岁，兴趣是%s&quot;</span> % (self.name, self.age, self.hobby))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reporter</span>:</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    question = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, q</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.question = q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是%s，我的问题是%s&quot;</span> % (self.name, self.question))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Interview</span>(Reporter, Passerby):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, j, h, q</span>):</span><br><span class="line">        Passerby.__init__(self, n, a, j, h)</span><br><span class="line">        Reporter.__init__(self, n, q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Jack = Interview(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;interviewer&#x27;</span>, <span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;你学过python吗&#x27;</span>)</span><br><span class="line">Jack.introduce()</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">我是Jack，我的问题是你学过<span class="keyword">python</span>吗</span><br></pre></td></tr></table></figure>
<p>Interviewer类继承了Reporter和Passerby类，父类中都包含introduce方法，继承时按照从左到右的顺序，先调用Reporter类中的方法。<br>
如果要指定方法，可以直接指定父类名进行调用。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Interview</span>(Reporter, Passerby):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, a, j, h, q</span>):</span><br><span class="line">        Passerby.__init__(self, n, a, j, h)</span><br><span class="line">        Reporter.__init__(self, n, q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        Passerby.introduce(self)</span><br></pre></td></tr></table></figure>
<p>最后的输出结果为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Jack</span>说：我<span class="number">30</span>岁，兴趣是reading</span><br></pre></td></tr></table></figure>
<h2 id="方法重写">方法重写</h2>
<p>在子类可以重写父类的方法，需要注意的是参数和返回类型需要和父类保持一致。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Area</span>:</span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length</span>):</span><br><span class="line">        self.length = length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length * self.length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Circle类继承Area类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Area</span>):</span><br><span class="line">    radius = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius, length</span>):</span><br><span class="line">        <span class="comment"># 调用父类的构造函数，对父类进行初始化</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(length)</span><br><span class="line">        self.radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> math.pi * self.radius ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">circle_a = Circle(<span class="number">3</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆面积为（保留两位小数）:&quot;</span>, circle_a.area().__round__(<span class="number">2</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="类的私有属性和方法">类的私有属性和方法</h2>
<p><code>__private_args</code>以两个下划线开头声明类的私有属性，不能在类的外部使用或直接访问<br>
<code>__private_method</code>以两个下划线开头声明累的私有方法，只能在类的内部调用</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    a = <span class="string">&#x27;公共属性&#x27;</span></span><br><span class="line">    __b = <span class="string">&#x27;私有属性&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是公共方法&#x27;</span>, self.a, self.__b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__foo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是私有方法&#x27;</span>, self.a, self.__b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = A()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;访问公共属性：&#x27;</span>, s.a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;访问公共方法&#x27;</span>, s.foo())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;访问私有属性：&#x27;</span>, s.__b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;访问私有方法&#x27;</span>, s.__foo())</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">访问公共属性： 公共属性</span><br><span class="line">访问公共方法 (<span class="string">&#x27;这是公共方法&#x27;</span>, <span class="string">&#x27;公共属性&#x27;</span>, <span class="string">&#x27;私有属性&#x27;</span>)</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  File <span class="string">&quot;F:\code\pythonTest\main.py&quot;</span>, <span class="built_in">line</span> <span class="number">15</span>, in <span class="symbol">&lt;module&gt;</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;访问私有属性：&#x27;</span>, s.__b)</span><br><span class="line">AttributeError: <span class="string">&#x27;A&#x27;</span> object <span class="built_in">has</span> <span class="keyword">no</span> attribute <span class="string">&#x27;__b&#x27;</span></span><br></pre></td></tr></table></figure>
<p>从结果可以看到，代码指定到第15行停止了，报错不能访问私有属性<br>
将15行注释，同样的不能直接访问私有方法：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">访问公共属性： 公共属性</span><br><span class="line">访问公共方法 (<span class="string">&#x27;这是公共方法&#x27;</span>, <span class="string">&#x27;公共属性&#x27;</span>, <span class="string">&#x27;私有属性&#x27;</span>)</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  File <span class="string">&quot;F:\code\pythonTest\main.py&quot;</span>, <span class="built_in">line</span> <span class="number">16</span>, in <span class="symbol">&lt;module&gt;</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&#x27;访问私有方法&#x27;</span>, s.__foo())</span><br><span class="line">AttributeError: <span class="string">&#x27;A&#x27;</span> object <span class="built_in">has</span> <span class="keyword">no</span> attribute <span class="string">&#x27;__foo&#x27;</span>. Did you mean: <span class="string">&#x27;_A__foo&#x27;</span>?</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>redis刷新缓存</title>
    <url>/posts/32958.html</url>
    <content><![CDATA[<ul>
<li>进入redis的src目录</li>
<li>执行命令 <code>./redis-cli -h [ip] -p [port]</code></li>
<li>执行命令 <code>auth &quot;[password]&quot;</code></li>
<li>执行命令<code>dbsize</code></li>
<li>执行命令<code>flushall</code> 清除缓存</li>
<li>使用<code>keys *</code> 验证是不是清除了缓存，如果看到empty list or set 则清除成功</li>
<li>执行<code>quit</code>退出</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>robotframework框架入门教程</title>
    <url>/posts/6612.html</url>
    <content><![CDATA[<h1>安装</h1>
<p>robotframework是一个关键字驱动的自动化测试框架，基于python语言，支持selenium、appnium、httprequest等库，也可以自定义lib。<br>
以python3.9为例，打开cmd，进入python脚本目录<code>Programs\Python\Python39\Scripts</code>：<br>
<code>pip install robotframework</code> 安装robotframework框架<br>
<code>pip install robotframework-selenium2library</code> 安装robotframework支持的selenium框架<br>
<code>pip install robotframework-ride</code>安装robotframework的图形化界面<br>
<code>pip install wxpython</code>ride 依赖的wxpython<br>
如果安装ride和wxpython过程中出现报错，可尝试降低python版本，ride安装不成功可尝试直接编辑py文件。</p>
<p>安装后，在Scripts目录下，双击ride.py运行界面，ride成功打开则安装成功：</p>
<img src="/posts/6612/ride%E7%95%8C%E9%9D%A2.png" class="" title="This is an image">
<h1>框架使用</h1>
<p>robotframework的一般目录如下：</p>
<img src="/posts/6612/%E7%9B%AE%E5%BD%95.png" class="" title="This is an image">
<h2 id="第一个项目">第一个项目</h2>
<ol>
<li>File-&gt; New Project创建一个项目，注意右侧Type需要选择为==Directory==，测试套件只能在文件夹中创建。</li>
</ol>
<img src="/posts/6612/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" class="" title="This is an image">
<ol start="2">
<li>在项目目录中右键New Suite添加测试套件，==Type选择File==</li>
</ol>
<img src="/posts/6612/%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E5%A5%97%E4%BB%B6.png" class="" title="This is an image">
<ol start="3">
<li>在测试套件上右键New Test Case添加用例</li>
</ol>
<img src="/posts/6612/%E5%88%9B%E5%BB%BA%E7%94%A8%E4%BE%8B.png" class="" title="This is an image">
<ol start="4">
<li>下载对应版本的浏览器驱动，并将浏览器驱动放在python安装路径的根目录下，如<code>Programs\Python\Python39</code></li>
</ol>
<ul>
<li>chrome driver：<br>
<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a><br>
<a href="https://registry.npmmirror.com/binary.html?path=chromedriver/">https://registry.npmmirror.com/binary.html?path=chromedriver/</a></li>
<li>firefox gecko driver:<br>
<a href="https://github.com/mozilla/geckodriver/releases/">https://github.com/mozilla/geckodriver/releases/</a></li>
<li>Microsoft Edge WebDriver:<br>
<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li>
<li>IE（需下载32位版本，64位版本中模拟键盘输入时有问题）:<br>
<a href="http://selenium-release.storage.googleapis.com/index.html?path=3.9/">http://selenium-release.storage.googleapis.com/index.html?path=3.9/</a></li>
</ul>
<ol start="5">
<li>在测试套件中Add Library，添加Selenium2Library, 导入库成功后字体是黑色，导入不成功则是红色</li>
</ol>
<img src="/posts/6612/%E5%AF%BC%E5%85%A5selenium1.png" class="" title="This is an image">
<img src="/posts/6612/%E5%AF%BC%E5%85%A5selenium2.png" class="" title="This is an image">
<ol start="6">
<li>编辑测试用例</li>
</ol>
<ul>
<li>以百度搜索为例，表格的一行相当于python中的一行代码</li>
<li>每一行都是以关键字开头，关键字后是关键字需要的参数</li>
<li>关键字变成蓝色，表示是合法的关键字，关键字后如果有红色的框，说明参数不能缺省</li>
<li>输入关键字时，<code>Alter+空格键</code>，可以联想有关的关键字，按<code>F5</code>可以搜索关键字</li>
</ul>
<img src="/posts/6612/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.png" class="" title="This is an imgae">
<ol start="7">
<li>运行测试用例<br>
勾选测试用例，点击运行按钮，运行后自动打开浏览器执行测试用例，用例执行成功时用例上的图标是绿色，执行失败是红色</li>
</ol>
<img src="/posts/6612/%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B.png" class="" title="This is an imgae">
<ol start="8">
<li>运行结果<br>
console log和message log显示了用例执行的过程</li>
</ol>
<img src="/posts/6612/%E7%BB%93%E6%9E%9C%E6%97%A5%E5%BF%97.png" class="" title="This is an imgae">
<p>点击report可查看图形化html报告</p>
<img src="/posts/6612/%E6%9F%A5%E7%9C%8Bhtml%E6%8A%A5%E5%91%8A.png" class="" title="This is an imgae">
<img src="/posts/6612/html%E7%BB%93%E6%9E%9C%E6%8A%A5%E5%91%8A.png" class="" title="This is an imgae">
<h2 id="自定义业务关键字">自定义业务关键字</h2>
<p>以上一个百度搜索为例，一个搜索模块需要写多条用例，需要每一条用例都写打开浏览器、定位元素，如果元素发生变动，不利于用例维护。根据分层和封装的思想，可以将用例中的操作抽象成业务关键字，一条用例中只需要关键字、输入、预期：</p>
<ol>
<li>在项目目录下右键，New Resource创建资源</li>
<li>在resource中右键，New User Keyword创建关键字【搜索】</li>
</ol>
<img src="/posts/6612/%E5%88%9B%E5%BB%BA%E5%85%B3%E9%94%AE%E5%AD%97.png" class="" title="This is an imgae">
<ol start="3">
<li>编辑关键字，给关键字添加两个参数<code>$&#123;search&#125;</code>,<code>$&#123;result&#125;</code>用来输入内容和预期，多个参数用<code>|</code>隔开</li>
</ol>
<img src="/posts/6612/%E7%BC%96%E8%BE%91%E5%85%B3%E9%94%AE%E5%AD%97.png" class="" title="This is an imgae">
<ol start="4">
<li>关键字编辑完成后，在测试套件下，导入资源</li>
</ol>
<img src="/posts/6612/%E5%AF%BC%E5%85%A5%E8%B5%84%E6%BA%90.png" class="" title="This is an imgae">
<ol start="5">
<li>在测试套件下，新增用例</li>
</ol>
<img src="/posts/6612/%E4%B8%9A%E5%8A%A1%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BE%8B.png" class="" title="This is an imgae">
<ol start="6">
<li>勾选用例后执行，执行效果和先前的用例相同</li>
</ol>
<h1>结语</h1>
<p>robotframework虽然常用来做UI测试，但是它的功能不止是UI测试，在安装了第三方库后，可以进行app UI测试，发送http请求，连接数据库，发送soap请求等，还可以自己开发lib，掌握了python和测试框架之后可以根据需要灵活使用。</p>
<h1>参考文档</h1>
<ol>
<li>虫师博客：<a href="https://www.cnblogs.com/fnng/p/3871712.html">https://www.cnblogs.com/fnng/p/3871712.html</a></li>
<li>robotframework官方：<a href="https://robotframework.org/">https://robotframework.org/</a></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>robotframework</tag>
      </tags>
  </entry>
  <entry>
    <title>shell教程： 变量、数组、运算符</title>
    <url>/posts/45136.html</url>
    <content><![CDATA[<p>shell脚本(shell script)是一种shell编写的脚本程序。</p>
<p>常用的shell种类为Bash，也就是Bourne Again Shell。</p>
<h1>简单的shell脚本</h1>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>#!</code>告诉系统其后路径所指定的程序是解释此脚本文件的shell程序，即告诉系统这个程序需要哪种解释器来执行，使用哪种shell</p>
<h1>运行shell 脚本的方法</h1>
<ul>
<li>作为可执行程序</li>
</ul>
<p>将上面的代码保存为<code>test.sh</code>，cd到相应目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./test.sh <span class="comment">#使脚本有执行权限</span></span><br><span class="line">./test.sh    <span class="comment">#执行脚本</span></span><br></pre></td></tr></table></figure>
<ul>
<li>作为解释器参数</li>
</ul>
<p>直接运行解释器，其参数就是脚本文件名，例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure>
<h1>shell变量</h1>
<p>变量名命名规则：</p>
<ul>
<li>命名只能使用英文字母、数字、下划线，首字符不能以数字开头</li>
<li>中间不能使用空格，可以使用下划线</li>
<li>不能使用标点符号</li>
<li>不能使用bash里的关键字</li>
</ul>
<p>其他规则：定义变量时，变量名不需要加$符号，变量名和等号之间不能有空格</p>
<h2 id="使用变量">使用变量</h2>
<p>使用定义过的变量，在变量名前加$符号，例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">test_string=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$test_string</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test_string&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="只读变量">只读变量</h2>
<p>使用readonly命令将变量定义为只读变量，只读变量的值不能被改变，例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">test_string=<span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> test_string</span><br></pre></td></tr></table></figure>
<h2 id="删除变量">删除变量</h2>
<p>使用unset 命令可以删除变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> variable _name</span><br></pre></td></tr></table></figure>
<p>变量被删除后不能再次使用，并且不能删除只读变量。</p>
<h2 id="变量类型">变量类型</h2>
<p>运行shell,会同时存在三种变量：</p>
<ul>
<li>局部变量：局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他sehll启动的程序不能访问局部变量</li>
<li>环境变量：所有的程序，包括shell启动程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量</li>
<li>shell变量：shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li>
</ul>
<h1>shell字符串</h1>
<h2 id="单引号">单引号</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&#x27;this is a string&#x27;</span></span><br></pre></td></tr></table></figure>
<p>单引号字符串的限制：</p>
<ul>
<li>单引号里的任何都会原样输出，单引号字符串中的变量是无效的</li>
<li>单引号字符串中不能出现单独的一个单引号（对单引号使用转义符后也不行），但可以成对出现，作为字符串拼接使用</li>
</ul>
<h2 id="双引号">双引号</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">test_string=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str=<span class="string">&quot;yes,you say \&quot;<span class="variable">$test_string</span>\&quot; !&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$str</span></span><br></pre></td></tr></table></figure>
<p>双引号的优点：</p>
<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
<h2 id="拼接字符串">拼接字符串</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;Rolly&quot;</span></span><br><span class="line"><span class="comment">#使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">&quot;hello,&quot;</span><span class="variable">$your_name</span><span class="string">&quot;!&quot;</span></span><br><span class="line">greeting_1=<span class="string">&quot;hello,<span class="variable">$&#123;your_name&#125;</span>!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span> <span class="variable">$greeting_1</span></span><br><span class="line"><span class="comment">#使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">&#x27;hello,&#x27;</span><span class="variable">$your_name</span><span class="string">&#x27;!&#x27;</span></span><br><span class="line">greeting_3=<span class="string">&#x27;hello,$&#123;your_name&#125;!&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span> <span class="variable">$greeting_3</span></span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hello,Rolly! hello,Rolly!</span><br><span class="line">hello,Rolly! hello,<span class="variable">$&#123;your_name&#125;</span>!</span><br></pre></td></tr></table></figure>
<h2 id="获取字符串长度">获取字符串长度</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="提取子字符串">提取子字符串</h2>
<p>从字符串第1个字符开始截取4个字符</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;helloworld&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:0:4&#125;</span></span><br></pre></td></tr></table></figure>
<p>从第5个字符开始，截取到字符串末尾</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;helloworld&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:5&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="查找子字符串">查找子字符串</h2>
<p>查找字符e或l的位置，哪个字符先出现就计算哪个：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$string</span>&quot;</span> el`</span><br></pre></td></tr></table></figure>
<p>以上内容中<code>`</code> 是反引号，不是单引号。</p>
<h1>shell数组</h1>
<p>bash支持一维数组，不支持多维数组，数组的大小没有限定。<br>
数组元素的下标由0开始编号，获取数组中的元素要利用下标，下标可以是整数或算数表达式，其值应大于或等于0。</p>
<h2 id="定义数组">定义数组</h2>
<p>用括号表示数组，数组元素用空格符号分隔开。<br>
例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3)</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[3]=value3</span><br></pre></td></tr></table></figure>
<p>可以使用不连续的下标，并且下标的范围没有限制。</p>
<h2 id="读取数组">读取数组</h2>
<p>读取数组元素值的一般格式为${数组名[下标]}<br>
例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span></span><br></pre></td></tr></table></figure>
<p>使用<code>@</code>或者<code>*</code>符号可以获取数组中的全部元素</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[*]&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="获取数组的长度">获取数组的长度</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment">#取得单个数组元素的长度</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[3]&#125;</span></span><br><span class="line"><span class="comment">#取得整个数组的长度</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br></pre></td></tr></table></figure>
<h1>shell注释</h1>
<h2 id="单行注释">单行注释</h2>
<p>以<code>#</code>开头的行就是注释，会被解释器忽略，例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#复制文件</span></span><br><span class="line"> <span class="function"><span class="title">copy</span></span>()&#123;</span><br><span class="line">     copy_target=`<span class="built_in">dirname</span> <span class="variable">$2</span>`</span><br><span class="line">     <span class="keyword">if</span> [ ! -d <span class="variable">$copy_target</span> ];<span class="keyword">then</span></span><br><span class="line">         <span class="built_in">mkdir</span> <span class="variable">$copy_target</span></span><br><span class="line">         <span class="built_in">cp</span> -a <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">cp</span> -a <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="多行注释">多行注释</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">注释内容</span></span><br><span class="line"><span class="string">注释内容</span></span><br><span class="line"><span class="string">注释内容</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">注释内容</span></span><br><span class="line"><span class="string">注释内容</span></span><br><span class="line"><span class="string">注释内容</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容</span><br><span class="line">注释内容</span><br><span class="line">注释内容</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
<p>例如使用多行注释标识函数的用法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">usage</span></span>()&#123;</span><br><span class="line"><span class="built_in">cat</span>&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">    -r &lt;dir&gt;             指定东方通安装目录，默认为/opt/TongWeb</span></span><br><span class="line"><span class="string">    -h                   打印帮助信息</span></span><br><span class="line"><span class="string">    start &lt;app&gt;         启动tongweb域，需指定应用名称,example: _TongWebTool.sh start app</span></span><br><span class="line"><span class="string">    stop &lt;app&gt;          停止tongwe域,需指定应用名称,example: _TongWebTool.sh stop app</span></span><br><span class="line"><span class="string">    restart &lt;app&gt;       重启tongweb域,需指定应用名称,examle:_TongWebTool.sh restart app</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>传递参数</h1>
<p>脚本内获取参数的格式为$n。<br>
例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;shell 传递参数实例：&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行文件名：<span class="variable">$0</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数：<span class="variable">$1</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数：<span class="variable">$2</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数：<span class="variable">$3</span>&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>为脚本设置可执行权限，并执行脚本，输出结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x test.sh</span><br><span class="line">$ ./test.sh  1 2 3</span><br><span class="line">shell 传递参数实例：</span><br><span class="line">执行文件名：test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br></pre></td></tr></table></figure>
<p>另外还有几个特殊字符来处理参数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数处理</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>$#</code></td>
<td>传递到脚本的参数个数</td>
</tr>
<tr>
<td style="text-align:center"><code>$*</code></td>
<td>以一个单字符串显示所有向脚本传递的参数</td>
</tr>
<tr>
<td style="text-align:center"><code>$$</code></td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td style="text-align:center"><code>$!</code></td>
<td>后台运行的最后一个进程ID号</td>
</tr>
<tr>
<td style="text-align:center"><code>$@</code></td>
<td>与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数</td>
</tr>
<tr>
<td style="text-align:center"><code>$-</code></td>
<td>显示shell使用的当前选项，与set命令功能相同</td>
</tr>
<tr>
<td style="text-align:center"><code>$?</code></td>
<td>显示最后命令的退出状态。0表示没有错误，其他任何值标识有错误</td>
</tr>
</tbody>
</table>
<h1>基本运算符</h1>
<p>例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">val=`<span class="built_in">expr</span> 2 + 2`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;两数之和为：<span class="variable">$val</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>以上例子中：</p>
<ul>
<li>expr 是表达式计算工具，使用它能完成表达式求值工作</li>
<li>表达式和运算符之间要有空格，<code>2+2</code>是不对的，要写成<code>2 + 2</code></li>
<li>表达式要被反引号<code>``</code>包含</li>
</ul>
<h2 id="算数运算符">算数运算符</h2>
<p>假设变量a为10,b为20</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>+</code></td>
<td>加法</td>
<td><code>`expr $a + $b`</code>结果为30</td>
</tr>
<tr>
<td style="text-align:center"><code>-</code></td>
<td>减法</td>
<td><code>`expr $a - $b`</code>结果为-10</td>
</tr>
<tr>
<td style="text-align:center"><code>*</code></td>
<td>乘法</td>
<td><code>`expr $a * $b`</code>结果为200</td>
</tr>
<tr>
<td style="text-align:center"><code>/</code></td>
<td>除法</td>
<td><code>`expr $b / $a`</code>结果为2</td>
</tr>
<tr>
<td style="text-align:center"><code>%</code></td>
<td>取余</td>
<td><code>`expr $b % $a`</code>结果为0</td>
</tr>
<tr>
<td style="text-align:center"><code>=</code></td>
<td>赋值</td>
<td>a=$b 把变量b的值赋给a</td>
</tr>
<tr>
<td style="text-align:center"><code>==</code></td>
<td>相等，用于比较两个数字，相同则返回true</td>
<td>[ $a == $b ]返回false</td>
</tr>
<tr>
<td style="text-align:center"><code>!=</code></td>
<td>不相等，用于比较两个数字，不同则返回true</td>
<td>[ $a != $b ]返回true</td>
</tr>
</tbody>
</table>
<p><font color="red">注：条件表达式要放在方括号之间，并且要有空格。</font></p>
<h2 id="关系运算符">关系运算符</h2>
<p>假设变量a为10,b为20</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-eq</td>
<td>等于，相等返回true</td>
<td>[ $a -eq $b ]  返回false</td>
</tr>
<tr>
<td style="text-align:center">-ne</td>
<td>不等于，不相等返回true</td>
<td>[ $a -ne $b ]返回true</td>
</tr>
<tr>
<td style="text-align:center">-gt</td>
<td>大于，是则返回true</td>
<td>[ $a -gt $b ]返回false</td>
</tr>
<tr>
<td style="text-align:center">-ls</td>
<td>小于，是则返回true</td>
<td>[ $a -ls $b ]返回true</td>
</tr>
<tr>
<td style="text-align:center">-ge</td>
<td>大于等于，是则返回true</td>
<td>[ $a -ge $b ]返回false</td>
</tr>
<tr>
<td style="text-align:center">-le</td>
<td>小于等于，是则返回true</td>
<td>[ $a -le $b ]返回true</td>
</tr>
</tbody>
</table>
<h2 id="布尔运算符">布尔运算符</h2>
<p>假设变量a为10,b为20</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">!</td>
<td>非运算</td>
<td>[!false] 返回true</td>
</tr>
<tr>
<td style="text-align:center">-o</td>
<td>或运算</td>
<td>[ $a -lt 20 -o $b -gt 100 ]返回true</td>
</tr>
<tr>
<td style="text-align:center">-a</td>
<td>与运算</td>
<td>[ $a -lt 20 -a $b -gt 100 ]返回false</td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算符">逻辑运算符</h2>
<p>假设变量a为10,b为20</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>逻辑的AND</td>
<td><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code>返回false</td>
</tr>
<tr>
<td><code>||</code></td>
<td>逻辑的OR</td>
<td><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code>返回true</td>
</tr>
</tbody>
</table>
<h2 id="字符串运算符">字符串运算符</h2>
<p>假设变量a为&quot;abc&quot;,b为&quot;efg&quot;</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td>两个字符串是否相等</td>
<td>[ $a = $b ]返回false</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td>两个字符串是否不相等</td>
<td>[ $a != $b ]返回true</td>
</tr>
<tr>
<td style="text-align:center">-z</td>
<td>字符串长度是否为0</td>
<td>[ -z $a ]返回false</td>
</tr>
<tr>
<td style="text-align:center">-n</td>
<td>字符串长度是否不为0</td>
<td>[ -n $a ]返回true</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td>字符串是否不为空</td>
<td>[ $a ]返回true</td>
</tr>
</tbody>
</table>
<h2 id="文件测试运算符">文件测试运算符</h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-b file</td>
<td>文件是否为块设备文件，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-c file</td>
<td>文件是否为字符设备文件，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-d file</td>
<td>文件是否为目录，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-f file</td>
<td>文件是否为普通文件（不是目录，不是设备文件），是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-g file</td>
<td>文件是否设置了SGID位，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-k file</td>
<td>文件是否设置了粘着位（sticky bit)，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-p file</td>
<td>文件是否有名管道，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-u file</td>
<td>文件是否设置了SUID位，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-r file</td>
<td>文件是否可读，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-w file</td>
<td>文件是否可写，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-x file</td>
<td>文件是否可执行，是则返回true</td>
</tr>
<tr>
<td style="text-align:center">-s file</td>
<td>文件是否为空（文件大小是否大于0），不为空返回true</td>
</tr>
<tr>
<td style="text-align:center">-e file</td>
<td>文件（包括目录）是否存在，存在返回true</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell：流程控制、函数</title>
    <url>/posts/37641.html</url>
    <content><![CDATA[<h1>流程控制</h1>
<h2 id="if…else">if…else</h2>
<ul>
<li>if<br>
shell中if语句的语法格式为：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">   command1</span><br><span class="line">   command2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition; <span class="keyword">then</span> command1;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 如果文件不存在，则创建</span></span><br><span class="line">file=tesh.txt</span><br><span class="line"><span class="keyword">if</span> [ ! -e <span class="variable">$file</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">touch</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<ul>
<li>if…else<br>
if…else的语法格式为：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line">b=<span class="string">&quot;efg&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a和b相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a和b不相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<ul>
<li>if…else if…else<br>
if…else if…else的语法格式为：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command1</span><br><span class="line"><span class="keyword">elif</span> condition2</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    command3</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a等于b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a大于b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a小于b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;没有符合的条件&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h2 id="for循环">for循环</h2>
<p>for循环一般格式为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 .... itemN</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">   command1</span><br><span class="line">   command2</span><br><span class="line">   ...</span><br><span class="line">   commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">a=(1 2 3 4 5)</span><br><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> <span class="variable">$&#123;a[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The value is <span class="variable">$loop</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="while循环">while循环</h2>
<p>while循环当条件为true时，一直执行命令，while语句的语法格式为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">int=1</span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$int</span> &lt;=<span class="number">5</span> ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The value is <span class="variable">$int</span>&quot;</span></span><br><span class="line"><span class="built_in">let</span> int++</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="until循环">until循环</h2>
<p>until循环执行命令直到条件为true时停止，在方式上和while循环相反，通常while循环使用较多，也有些场景until循环更加有用，一般格式为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">until</span> condition</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">int=1</span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$int</span> -gt 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The value is <span class="variable">$int</span>&quot;</span></span><br><span class="line">int=`<span class="built_in">expr</span> <span class="variable">$int</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="case…esac">case…esac</h2>
<p>case…esac和switch…case类似，是多分支选择结构，使用<code>;;</code>表示break。case语句会匹配取值是否符合某一模式，匹配后执行该模式下的命令，如果没有任何匹配，可以使用<code>*</code>捕获该值。语法结构为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> var <span class="keyword">in</span> </span><br><span class="line">choice1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">choice2)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span>  </span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入1-3之间的数字&quot;</span></span><br><span class="line"><span class="built_in">read</span> num</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$num</span> <span class="keyword">in</span></span><br><span class="line">  1) <span class="built_in">echo</span> <span class="string">&quot;你选择了数字1&quot;</span></span><br><span class="line">  ;;</span><br><span class="line">  2) <span class="built_in">echo</span> <span class="string">&quot;你选择了数字2&quot;</span></span><br><span class="line">  ;;</span><br><span class="line">  3) <span class="built_in">echo</span> <span class="string">&quot;你选择了数字3&quot;</span></span><br><span class="line">  ;;</span><br><span class="line">  *) <span class="built_in">echo</span> <span class="string">&quot;选择了错误的数字&quot;</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<h2 id="跳出循环">跳出循环</h2>
<p>和其他语言类似，shell使用<code>break</code>和<code>continue</code>跳出循环，<code>break</code>跳出所有循环，<code>continue</code>跳出当前循环。<br>
例：猜数游戏，猜中数字后跳出所有循环</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;猜数游戏&quot;</span></span><br><span class="line">target=87</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> num</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$num</span> -gt <span class="variable">$target</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;输入的数字大了&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$num</span> -lt <span class="variable">$target</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;输入的数字小了&quot;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">&quot;猜中了~&quot;</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>例：打印1-10之间的奇数，如果是偶数则跳过</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">int=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$int</span> -le 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    value=`<span class="built_in">expr</span> <span class="variable">$int</span> % 2`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$value</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;int++&quot;</span></span><br><span class="line">    <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">&quot;This number is <span class="variable">$int</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;int++&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>函数</h1>
<p>shell中也可以自定义函数，定义函数后，可以在脚本中调用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="function"><span class="title">plus</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;加法运算...&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入第一个数字&quot;</span></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入第二个数字&quot;</span></span><br><span class="line"><span class="built_in">read</span> b</span><br><span class="line"><span class="built_in">return</span> $((a+b))</span><br><span class="line">&#125;</span><br><span class="line">plus</span><br><span class="line"><span class="comment"># 通过$?获取return的返回值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;两个数字的和为 $?&quot;</span></span><br></pre></td></tr></table></figure>
<p>调用函数时，可以传递参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$#</code></td>
<td>传递到脚本或函数的参数个数</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>以一个单字符串显示所有向脚本传递的参数</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td><code>$!</code></td>
<td>后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td><code>$@</code></td>
<td>使用时加引号，在引号中返回每个参数</td>
</tr>
<tr>
<td><code>$?</code></td>
<td>显示最后命令的退出状态，0表示没有错误，其他任何值表示有错误</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>sql中一个字段拆分成多行</title>
    <url>/posts/62598.html</url>
    <content><![CDATA[<p>利用regexp_substr将一个字段拆分成多行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">		filesend_id,</span><br><span class="line">		regexp_substr(readerids,<span class="string">&#x27;[^,]+&#x27;</span>,<span class="number">1</span>,LEVEL) <span class="keyword">AS</span> readerid</span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		a <span class="keyword">CONNECT</span> <span class="keyword">BY</span> LEVEL <span class="operator">&lt;=</span> regexp_count(readerids,<span class="string">&#x27;,&#x27;</span>) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">		<span class="keyword">and</span> a.filesend_id <span class="operator">=</span> PRIOR a.filesend_id <span class="keyword">and</span> PRIOR dbms_random.VALUE <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p><strong>regexp_substr各个参数的解释说明</strong></p>
<p>function REGEXP_SUBSTR(String, pattern, position, occurrence, modifier)</p>
<ul>
<li>string: 需要进行正则处理的字符串</li>
<li>patttern: 进行匹配的正则表达式</li>
<li>position: 起始位置，从字符串的第几个字符开始正则表达式匹配（默认是1），字符串的起始位置是1不是0</li>
<li>occurrence: 获取第几个分割出来的组</li>
<li>modifier: 模式（i 不区分大小写进行检索，c 区分大小写进行检索，默认为c）</li>
</ul>
<p>上面sql中的LEVEL转换成输出多少个子串。</p>
<p><strong>regexp_count用来统计字符串出现的次数</strong></p>
<p>语法：REGEXP_COUNT (source_char, pattern [, position [, match_param]])</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用POI实现文件模板内容替换</title>
    <url>/posts/32534.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将数据替换到文件中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> targetFile 文件模板</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> dataField 数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fillDataToWord</span><span class="params">(File targetFile, Map&lt;String, Object&gt; dataField)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(targetFile);</span><br><span class="line">           <span class="type">XWPFDocument</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XWPFDocument</span>(inputStream);</span><br><span class="line">           <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(targetFile);) &#123;</span><br><span class="line">           Iterator&lt;XWPFTable&gt; iterator = document.getTablesIterator();</span><br><span class="line">           <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">               <span class="type">XWPFTable</span> <span class="variable">table</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">               List&lt;XWPFTableRow&gt; rows = table.getRows();</span><br><span class="line">               <span class="keyword">for</span> (XWPFTableRow row : rows) &#123;</span><br><span class="line">                   List&lt;XWPFTableCell&gt; cells = row.getTableCells();</span><br><span class="line">                   <span class="keyword">for</span> (XWPFTableCell cell : cells) &#123;</span><br><span class="line">                       List&lt;XWPFParagraph&gt; paragraphs = cell.getParagraphs();</span><br><span class="line">                       <span class="keyword">for</span> (XWPFParagraph paragraph : paragraphs) &#123;</span><br><span class="line">                           replaceParagraph(paragraph, dataField);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           document.write(out);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用数据替换文件中的占位符</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> paragraph</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> dataField</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">replaceParagraph</span><span class="params">(XWPFParagraph paragraph, Map&lt;String, Object&gt; dataField)</span> &#123;</span><br><span class="line">       List&lt;XWPFRun&gt; runs = paragraph.getRuns();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;runs.size(); i++) &#123;</span><br><span class="line">           <span class="type">XWPFRun</span> <span class="variable">run</span> <span class="operator">=</span> runs.get(i);</span><br><span class="line">           <span class="type">String</span> <span class="variable">runsText</span> <span class="operator">=</span> run.getText(<span class="number">0</span>);</span><br><span class="line">           <span class="keyword">if</span> (runsText.contains(<span class="string">&quot;$&#123;&quot;</span>) ||</span><br><span class="line">                   (runsText.contains(<span class="string">&quot;$&quot;</span>) &amp;&amp; runs.get(i+<span class="number">1</span>).getText(<span class="number">0</span>).substring(<span class="number">0</span>,<span class="number">1</span>).contains(<span class="string">&quot;&#123;&quot;</span>))) &#123;</span><br><span class="line">               <span class="keyword">while</span>(!runsText.contains(<span class="string">&quot;&#125;&quot;</span>)) &#123;</span><br><span class="line">                   runsText += runs.get(i+<span class="number">1</span>).getText(<span class="number">0</span>);</span><br><span class="line">                   paragraph.removeRun(i+<span class="number">1</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> runsText.substring(runsText.indexOf(<span class="string">&quot;$&#123;&quot;</span>)+<span class="number">2</span>, runsText.indexOf(<span class="string">&quot;&#125;&quot;</span>));</span><br><span class="line">               <span class="keyword">if</span>(dataField.containsKey(key)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (<span class="string">&quot;sheetMaker&quot;</span>.equals(key) || <span class="string">&quot;deputyLeader&quot;</span>.equals(key)) &#123;</span><br><span class="line">                       run.setText(<span class="string">&quot;&quot;</span>, <span class="number">0</span>);</span><br><span class="line">                       <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> dataField.get(key).toString();</span><br><span class="line">                      <span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename)) &#123;</span><br><span class="line">                          <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> Units.toEMU(<span class="number">100</span>);</span><br><span class="line">                          <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span>  Units.toEMU(<span class="number">60</span>);</span><br><span class="line">                          run.addPicture(is, XWPFDocument.PICTURE_TYPE_JPEG, filename, width, height); <span class="comment">// 替换图片</span></span><br><span class="line">                      &#125; <span class="keyword">catch</span> (IOException | InvalidFormatException e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                      &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       run.setText(dataField.get(key).toString(), <span class="number">0</span>); <span class="comment">// 替换文字</span></span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>同步两个文件夹中的文件</title>
    <url>/posts/62325.html</url>
    <content><![CDATA[<p>使用shell比较两个文件夹中的文件，并同步文件。<br>
实现思路是：</p>
<ol>
<li>递归遍历源文件路径，获取源文件路径中的所有文件</li>
<li>判断源文件在目标文件路径中是否存在，如果不存在，直接复制，如果存在则比较时间戳，时间戳不一致则进行同步</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"><span class="comment"># 源文件路径</span></span><br><span class="line">sourceDir=/opt/sourceDir</span><br><span class="line"><span class="comment"># 目标文件路径</span></span><br><span class="line">targetDir=/opt/targetDir</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历源文件路径</span></span><br><span class="line"><span class="function"><span class="title">readDir</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span> <span class="variable">$1</span>`</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">     path=<span class="variable">$1</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span></span><br><span class="line">     <span class="keyword">if</span> [ -d <span class="variable">$path</span> ];<span class="keyword">then</span></span><br><span class="line">       <span class="keyword">if</span> [[ <span class="variable">$path</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$path</span> != <span class="string">&#x27;..&#x27;</span> ]];<span class="keyword">then</span></span><br><span class="line">          readDir <span class="variable">$path</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       source_path_length=<span class="variable">$&#123;#sourceDir&#125;</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$&#123;path:source_path_length+1&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制文件</span></span><br><span class="line"> <span class="function"><span class="title">copy</span></span>()&#123;</span><br><span class="line">     copy_target=`<span class="built_in">dirname</span> <span class="variable">$2</span>`</span><br><span class="line">     <span class="keyword">if</span> [ ! -d <span class="variable">$copy_target</span> ];<span class="keyword">then</span></span><br><span class="line">         <span class="built_in">mkdir</span> <span class="variable">$copy_target</span></span><br><span class="line">         <span class="built_in">cp</span> -a <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">cp</span> -a <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">     <span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="title">compare</span></span>()&#123;</span><br><span class="line">    sourceFiles=`readDir <span class="variable">$sourceDir</span>`</span><br><span class="line">    targetPath=`<span class="built_in">realpath</span> -s <span class="variable">$targetDir</span>`</span><br><span class="line">    sourcePath=`<span class="built_in">realpath</span> -s <span class="variable">$sourceDir</span>`</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$&#123;sourceFiles&#125;</span></span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    <span class="comment">#判断文件是否存在，不存在则直接复制，存在则比较时间戳</span></span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$targetPath</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> ];<span class="keyword">then</span></span><br><span class="line">             <span class="built_in">echo</span> -e <span class="string">&quot;\033[31m `date &quot;</span>+%Y-%m-%d %H:%M:%S<span class="string">&quot;` <span class="variable">$targetPath</span>中<span class="variable">$file</span>不存在，准备复制~ \033[0m&quot;</span> | <span class="built_in">tee</span> -a syncFile.<span class="built_in">log</span></span><br><span class="line">             copy <span class="variable">$sourcePath</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> <span class="variable">$targetPath</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span></span><br><span class="line">        <span class="keyword">elif</span> [ ! `<span class="built_in">stat</span> -c %Y <span class="variable">$sourcePath</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span>` == `<span class="built_in">stat</span> -c %Y <span class="variable">$targetPath</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span>` ];<span class="keyword">then</span></span><br><span class="line">             <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m `date &quot;</span>+%Y-%m-%d %H:%M:%S<span class="string">&quot;` <span class="variable">$targetPath</span>中<span class="variable">$&#123;file&#125;</span>与源文件最后修改时间不同，准备复制~ \033[0m&quot;</span> | <span class="built_in">tee</span> -a syncFile.<span class="built_in">log</span></span><br><span class="line">             copy <span class="variable">$sourcePath</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span> <span class="variable">$targetPath</span><span class="string">&quot;/&quot;</span><span class="variable">$file</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="string">&quot; `date &quot;</span>+%Y-%m-%d %H:%M:%S<span class="string">&quot;` <span class="variable">$targetPath</span>&quot;</span>/<span class="string">&quot;<span class="variable">$file</span>与源文件相同&quot;</span> | <span class="built_in">tee</span> -a syncFile.<span class="built_in">log</span></span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compare</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>多条查询结果拼接为一个字符串</title>
    <url>/posts/20808.html</url>
    <content><![CDATA[<div class="note info simple"><p>日常开发中，有时候需要将多条查询结果拼接为一个字符串，这时候需要使用行列转换函数(以Oracle为例)。</p>
</div>
<h1>list_agg()函数</h1>
<p>函数返回结果为varchar2格式的数据，拼接后的字符串长度超过4000时，大于4000的字符串会报字符串连接过长的错误。例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">listagg</span>(name, <span class="string">&#x27;,&#x27;</span>)<span class="keyword">within</span> <span class="keyword">group</span>(<span class="keyword">order</span> <span class="keyword">by</span> sort_no) <span class="keyword">from</span> T;</span><br></pre></td></tr></table></figure>
<p>listagg行转列之后，会按照原有的查询结果的顺序排列。<br>
官方文档：<a href="https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions089.htm#SQLRF30030">https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions089.htm#SQLRF30030</a></p>
<h1>xmlagg()函数</h1>
<p>函数返回结果为CLOB类型，最大可存储4GB的数据长度，拼接字符同样也可以自定义。例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> xmlagg(xmlparse(content name <span class="operator">||</span><span class="string">&#x27;,&#x27;</span> wellformed) <span class="keyword">order</span> <span class="keyword">by</span> sort_no).getclobval() <span class="keyword">from</span> T;</span><br></pre></td></tr></table></figure>
<h1>wm_concat()函数</h1>
<p>函数返回的结果也是大对象数据类型，中间连接符不能自定义，连接符为逗号。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> wmsys.wm_concat(name) <span class="keyword">from</span> T;</span><br></pre></td></tr></table></figure>
<p>但是wm_concat函数行转列之后不会按照原有查询结果的顺序排列，如果需要保持顺序不变，要用list_agg来完成。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>性能测试基本概念</title>
    <url>/posts/56311.html</url>
    <content><![CDATA[<h1>什么是性能测试</h1>
<p>性能测试是试针对系统的<strong>性能指标</strong>，建立<strong>性能测试模型</strong>，制定<strong>性能测试方案</strong>，制定<strong>监控策略</strong>，在<strong>场景条件</strong>之下执行<strong>性能场景</strong>，<strong>分析</strong>判断性能瓶颈并<strong>调优</strong>，最终得出<strong>性能结果</strong>来评估系统的性能指标是否满足既定值。</p>
<h2 id="指标有哪些">指标有哪些</h2>
<p>时间指标、容量指标、资源利用率指标</p>
<h2 id="如何建立性能模型">如何建立性能模型</h2>
<p>选择适合系统业务逻辑的方式：真实场景的抽象</p>
<h2 id="性能方案的关键点">性能方案的关键点</h2>
<p>测试环境、测试数据、测试模型、性能指标、压力策略、准入准出、进度风险</p>
<h2 id="性能监控">性能监控</h2>
<p>分层、分段监控，全局监控、定向监控</p>
<h2 id="预定的条件">预定的条件</h2>
<p>在场景执行之前，应确定：软硬件环境、测试数据、测试执行策略、压力补偿</p>
<h2 id="场景">场景</h2>
<p>“场景”的定义：在既定的环境（包括动态扩展等策略）、既定的数据（包括场景执行中的数据变化）、既定的执行策略、既定的监控之下，执行性能脚本，同时观察系统各层级的性能状态参数变化，并实时判断分析场景是否符合预期。<br>
场景的分类：<br>
1）基准性能场景：做单场景的容量，为混合容量做准备；<br>
2）容量性能场景：最核心的性能执行部分；<br>
3）稳定性能场景：核心元素是时间，时间的设置来自运维周期；<br>
4）异常性能场景：在压力流量之下，模拟异常；</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>作用</th>
<th>替换的概念</th>
</tr>
</thead>
<tbody>
<tr>
<td>基准性能场景</td>
<td>也可称之为但交易容量，即将每一个业务都压到最大TPS，从而为后续从场景做业务比对</td>
<td></td>
</tr>
<tr>
<td>容量性能场景</td>
<td>也可称之为混合容量性能场景，即将所有业务根据比例加到一个场景中，在数据、软硬件环境、监控等的配合之下，分析瓶颈并调优的过程</td>
<td>性能测试、负载测试、压力测试、强度测试、容量测试、极限测试、性能评测测试、性能调优测试、并发测试、综合场景测试、递增测试、内存泄漏测试、数据容量测试、极限测试、配置测试</td>
</tr>
<tr>
<td>稳定性性能场景</td>
<td>核心就是时长。在长时间的运行之下，观察系统的性能表现，分析瓶颈并调优的过程</td>
<td>疲劳强度测试、稳定性压力测试</td>
</tr>
<tr>
<td>异常性能场景</td>
<td>显然就是异常的定义最为重要。常用的手段有宕主机、宕应用、宕网卡。实际的场景要模拟什么样的异常，一定是根据系统的业务架构和部署架构分析而来的。</td>
<td>破坏性压力测试</td>
</tr>
</tbody>
</table>
<div class="note info modern"><p>性能测试（统称）：验证速度、扩展性、稳定性;<br>
负载测试：模拟正常使用，验证系统在正常压力和高峰期压力下的运行状况，侧重多用户同时使用;<br>
容量测试：在真实负载的基础上继续提升压力，直到出现拐点;<br>
压力测试：不管是否拐点，继续增加压力;</p>
</div>
<h2 id="分析调优">分析调优</h2>
<p>要不要调优，要按照性能项目和性能职责定位来确定。</p>
<p><strong>性能项目分类</strong></p>
<ul>
<li>新系统性能测试类：要测出系统的最大容量；</li>
<li>旧系统新版本性能测试类：和旧版本对比，只要性能不下降就可以根据- 历史数据推算容量，对调优要求不大；</li>
<li>新系统性能测试优化类：要测试出最大容量，要求调优到最好；</li>
</ul>
<p><strong>职责定位分类</strong></p>
<ul>
<li>性能验证：针对给定的指标，只做性能验证；</li>
<li>性能测试：针对给定的系统，做全面的性能测试，可以得到系统最大容量，但不涉及调优；</li>
<li>性能测试+分析调优：针对给定的系统，做全面的性能测试，同时将系统调优到最优状态；</li>
</ul>
<h2 id="结果报告">结果报告</h2>
<img src="/posts/56311/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E6%8A%A5%E5%91%8A.png" class="">
<h1>性能测试指标的理解</h1>
<h2 id="TPS和响应时间的关系">TPS和响应时间的关系</h2>
<img src="/posts/56311/TPS%E5%92%8C%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="">
<p>蓝色表示TPS，黄色表示响应时间</p>
<h2 id="常用的性能指标">常用的性能指标</h2>
<table>
<thead>
<tr>
<th>简写</th>
<th>全称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>RT</td>
<td>Response Time</td>
<td>响应时间</td>
</tr>
<tr>
<td>HPS</td>
<td>Hits Per Second</td>
<td>每秒点击数</td>
</tr>
<tr>
<td>TPS</td>
<td>Transactions Per Second</td>
<td>每秒事务数</td>
</tr>
<tr>
<td>QPS</td>
<td>Queries Per Second</td>
<td>在MySQL中指每秒SQL数</td>
</tr>
<tr>
<td>RPS</td>
<td>Requests Per Second</td>
<td>每秒请求数</td>
</tr>
<tr>
<td>CPS</td>
<td>在HTTP协议中，CPS指的是每秒HTTP返回码</td>
<td></td>
</tr>
<tr>
<td>PV</td>
<td>Page View</td>
<td>页面浏览量</td>
</tr>
<tr>
<td>UV</td>
<td>Unique Visitor</td>
<td>独立访问者</td>
</tr>
<tr>
<td>IP</td>
<td>Internet Protocol</td>
<td>在性能中一般是指独立IP数</td>
</tr>
<tr>
<td>Throughput</td>
<td>/</td>
<td>吞吐量</td>
</tr>
<tr>
<td>IOPS</td>
<td>Input/Output Operations Per Second</td>
<td>每秒IO操作</td>
</tr>
</tbody>
</table>
<h1>性能指标的计算</h1>
<h2 id="并发用户数计算">并发用户数计算</h2>
<p><strong>方法一</strong><br>
公式：<br>
并发用户数计算： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mi>L</mi></mrow><mi>T</mi></mfrac></mrow><annotation encoding="application/x-tex">C=\frac{nL}{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>
并发用户数峰值： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>C</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>≈</mo><mi>C</mi><mo>+</mo><mn>3</mn><mo>×</mo><msqrt><mi>C</mi></msqrt></mrow><annotation encoding="application/x-tex">C&#x27;\approx C+3 \times \sqrt{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1133em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9267em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-2.8867em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1133em;"><span></span></span></span></span></span></span></span></span><br>
n：login session 的总数<br>
L：login session 的平均长度<br>
T：所关注的时间段<br>
<strong>方法二</strong><br>
假如32个用户进入了系统，一部分用户不做任何操作，在线用户数32，并发用户16，并发度50%。所以需要统计两个数据：<br>
1.在线用户数<br>
2.执行某个动作的并发用户数<br>
<strong>方法三</strong><br>
二八原则：80%的数据是由20%的用户产生的，统计出某个场景的使用用户，粗浅的可以算出并发用户数。如果不是新系统，也可以结合用户产生的数据量、使用的用户数，综合计算出TPS。</p>
<p>不管是以上哪种方法，并发用户数的计算得到的是一个大概的值，只能说是正确但不精确。</p>
<h2 id="业务模型">业务模型</h2>
<ul>
<li>根据生产环境的统计信息做业务比例的统计，然后设定到压力工具中。</li>
<li>直接在生产环境中做流量复制的方式或压力工具直接对生产环境发起压力的方式做压力测试</li>
</ul>
<h2 id="并发用户数到压力机线程数的转换">并发用户数到压力机线程数的转换</h2>
<p>10000在线用户，并发度1%，TPS就是10000*1%=100，如果平均响应时间是50ms，每个线程的TPS就是1000ms/50ms=20,要达到100TPS，只需要设置5个线程就可以了。</p>
<img src="/posts/56311/%E5%B9%B6%E5%8F%91%E7%94%A8%E6%88%B7%E6%95%B0%E5%88%B0%E5%8E%8B%E5%8A%9B%E6%9C%BA%E7%BA%BF%E7%A8%8B%E6%95%B0.png" class="">
<p>以上转换关系可以总结为下面的算式：<br>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>P</mi><mi>S</mi><mo>=</mo><mfrac><mrow><mn>1000</mn><mi>m</mi><mi>s</mi></mrow><mrow><mtext>响应时间</mtext><mo stretchy="false">(</mo><mi>m</mi><mi>s</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>×</mo><mtext>压力机线程数</mtext></mrow><annotation encoding="application/x-tex">TPS=\frac{1000ms}{响应时间(ms)} \times 压力机线程数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TPS</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3651em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">响应时间</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">s</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">压力机线程数</span></span></span></span><br>
对于压力工具来说，只要不报错，我们就关心 TPS 和响应时间就可以了，因为对于服务端来说，TPS反映的是服务器的处理能力，压力机线程数并不关键。</p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>性能监控工具nmon</title>
    <url>/posts/41888.html</url>
    <content><![CDATA[<h1>nmon</h1>
<h3 id="检查安装环境">检查安装环境</h3>
<p>1、查看版本内核</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure>
<p>2、查看系统版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="下载">下载</h3>
<p>根据系统版本下载对应版本的nmon：<br>
<a href="http://nmon.sourceforge.net/pmwiki.php?n=Site.Download">http://nmon.sourceforge.net/pmwiki.php?n=Site.Download</a><br>
CentOS7安装nmon16e_mpginc.tar.gz<br>
nmon analyze下载：<br>
<a href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power+Systems/page/nmon_analyser">https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power+Systems/page/nmon_analyser</a></p>
<h3 id="安装">安装</h3>
<ul>
<li>安装位置/opt/nmon</li>
<li>在opt目录下创建nmon文件夹</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> ~]<span class="meta"># cd /opt</span></span><br><span class="line">[root<span class="symbol">@localhost</span> opt]<span class="meta"># mkdir nmon</span></span><br></pre></td></tr></table></figure>
<ul>
<li>上传nmon16e_mpginc.tar.gz到nmon目录</li>
<li>解压</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># tar -zxvf nmon16e_mpginc.tar.gz</span></span><br></pre></td></tr></table></figure>
<ul>
<li>赋权限</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># cd ../</span></span><br><span class="line">[root<span class="symbol">@localhost</span> opt]<span class="meta"># chmod -R 755 nmon</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># ./nmon_x86_64_centos7</span></span><br></pre></td></tr></table></figure>
<h3 id="配置环境变量">配置环境变量</h3>
<ul>
<li>修改启动文件名称</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># mv nmon_x86_64_centos7 nmon</span></span><br><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># ./nmon</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加到配置文件中</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># vi /etc/profile</span></span><br></pre></td></tr></table></figure>
<p><code>PATH=$PATH:/opt/nmon/nmon</code> $PATH:后为命令的路径<br>
<code>export PATH</code><br>
保存后退出</p>
<ul>
<li>使配置文件立即生效</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># source /etc/profile</span></span><br><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># nmon   （在任何目录下执行nmon命令启动nmon）</span></span><br></pre></td></tr></table></figure>
<h3 id="数据采集">数据采集</h3>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> nmon]<span class="meta"># nmon –f –t –r test –s 1 –c 30 -m /opt/nmon</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-s1</td>
<td style="text-align:left">每隔n秒抽样一次，这里为1秒</td>
</tr>
<tr>
<td>-c30</td>
<td style="text-align:left">取出多少个抽样数量，这里为30，即监控=1*30/60=0.5分钟</td>
</tr>
<tr>
<td>-f</td>
<td style="text-align:left">按标准格式输出文件名称：<hostname>_YYMMDD_HHMM.nmon</td>
</tr>
<tr>
<td>-m</td>
<td style="text-align:left">指定监控文件的存放目录，-m后跟指定目录</td>
</tr>
<tr>
<td>-t</td>
<td style="text-align:left">输出最耗资源的进程</td>
</tr>
<tr>
<td>-r test</td>
<td style="text-align:left">监控记录的标题</td>
</tr>
</tbody>
</table>
<h3 id="生成图形化报表">生成图形化报表</h3>
<ul>
<li>将.nmon文件转化为.csv文件</li>
</ul>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">sort localhost_<span class="number">190415_1642</span>.nmon&gt;localhost_<span class="number">190415_1642</span>.csv</span><br></pre></td></tr></table></figure>
<ul>
<li>将csv文件下载到本地</li>
<li>在本地解压nmon_analyser工具，打开nmon _analyser_v60.xlsm</li>
<li>在Analyser页签，点击Analyze nmon data加载csv文件</li>
</ul>
<h3 id="结束nmon运行">结束nmon运行</h3>
<p><code>ps -ef|grep nmon</code><br>
<code>kill -9 pid</code></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能测试</tag>
        <tag>nmon</tag>
      </tags>
  </entry>
  <entry>
    <title>文件压缩和解压缩</title>
    <url>/posts/23050.html</url>
    <content><![CDATA[<p>文件压缩和解压缩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ZipUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ZipUtils</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> Logger.getLogger(ZipUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFile 源文件或源文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zipFile 目标文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doCompress</span><span class="params">(String srcFile, String zipFile)</span> &#123;</span><br><span class="line"></span><br><span class="line">        doCompress(<span class="keyword">new</span> <span class="title class_">File</span>(srcFile), <span class="keyword">new</span> <span class="title class_">File</span>(zipFile));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doCompress</span><span class="params">(File srcFile, File zipFile)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(zipFile); <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(fos);) &#123;</span><br><span class="line">            compressFile(srcFile, zos, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;压缩失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFile 源文件或源文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 文件操作流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir 目标文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compressFile</span><span class="params">(File srcFile, ZipOutputStream out, String dir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (srcFile.isDirectory()) &#123;</span><br><span class="line">            File[] files = srcFile.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(dir))</span><br><span class="line">                        name = dir + <span class="string">&quot;/&quot;</span> + name;</span><br><span class="line">                    compressFile(file, out, name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ZipUtils.doZip(srcFile, out, dir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doZip</span> <span class="params">(File srcFile, ZipOutputStream out, String dir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String entryName;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(dir))</span><br><span class="line">            entryName = dir + <span class="string">&quot;/&quot;</span> + srcFile.getName();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            entryName = srcFile.getName();</span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">zipEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(entryName);</span><br><span class="line">        out.putNextEntry(zipEntry);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);) &#123;</span><br><span class="line">            <span class="keyword">while</span>((len =  fis.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span> , len);</span><br><span class="line">                out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            out.closeEntry();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deCompress</span><span class="params">(String filePath, String targetDir)</span> &#123;</span><br><span class="line">        deCompress(<span class="keyword">new</span> <span class="title class_">File</span>(filePath), targetDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压缩</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFile 源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetDir 目标文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deCompress</span> <span class="params">(File srcFile, String targetDir)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile); <span class="type">ZipInputStream</span> <span class="variable">zis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(fis);) &#123;</span><br><span class="line">            deCompressFile(zis, targetDir);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;解压缩失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压缩文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zis 文件操作流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetDir 目标文件夹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deCompressFile</span><span class="params">(ZipInputStream zis, String targetDir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ZipEntry zipEntry;</span><br><span class="line">        <span class="keyword">while</span>((zipEntry = zis.getNextEntry()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> zipEntry.getName();</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>( targetDir + fileName);</span><br><span class="line">            <span class="keyword">if</span> (zipEntry.isDirectory()) &#123;</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file); <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos, buffer.length))&#123;</span><br><span class="line">                    <span class="keyword">while</span> ((len = zis.read(buffer, <span class="number">0</span>, buffer.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    bos.flush();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    zis.closeEntry();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listFiles</span><span class="params">(File file, List list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                listFiles(f, list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> file.getPath();</span><br><span class="line">            list.add(filePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;D:\\2e5cc0152c954ddbb53bc2a716144fa3&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">target</span>  <span class="operator">=</span> <span class="string">&quot;D:\\N20230007.zip&quot;</span>;</span><br><span class="line">        ZipUtils.doCompress(src,target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>理解上下文</title>
    <url>/posts/14276.html</url>
    <content><![CDATA[<p>上下文<code>context.Context</code> 是go语言中用来设置截止日期、同步信号，传递请求相关值的结构体。</p>
<p>基础结构：</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
empty[emptyCtx]
value[valueCtx] --&gt;|&quot;context.WithValue()&quot;| empty
cancel[cancelCtx] ----&gt;|&quot;context.WithCancel()&quot;| empty
timer[timerCtx] -----&gt;|&quot;context.WithTimeout()\ncontext.WithDeadline()&quot;| cancel
  </pre></div>
<p>context支持以下方法：</p>
<ul>
<li>withCancel：基于父级context， 创建一个可以取消的新context</li>
<li>WithDeadline：基于父级context， 创建一个具有截止时间的新context</li>
<li>WithTimeout：基于父级context， 创建一个具有超时时间的新context</li>
<li>Background：创建一个空的context，一般用于作为根的父级context</li>
<li>TODO：创建一个空的context， 一般用于为确定时的声明使用</li>
<li>WithValue：基于某个context创建并存储对应的上下文信息</li>
</ul>
<p>在goroutine构成的树形结构中对信号进行同步以减少计算资源的浪费是<code>context.Context</code>的最大作用。Go服务的每一个请求都是通过单独的goroutine处理的。我们可能创建多个goroutine来处理一次请求，<code>context.Context</code>的作用是在不同goroutine之间同步请求特定数据、取消信号一级处理请求的截止日期。</p>
<p>main goroutine创建并传递新的context给goroutine a 和goroutine b，goroutine a再将其context传递给了goroutine c, d, e。goroutine a 在运行时调用了cancel方法，使得该context及其对应的子集均收到取消信号。</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
main[main goroutine] --&gt;|context| a[goroutine a]
main --&gt;|context| b[goroutine b]
a --&gt;|context\n cancel| c[goroutine c]
c--&gt;|&quot;❌&quot;|d[goroutine d]
d--&gt;|&quot;❌&quot;|e[goroutine e]
classDef someclass fill:#f96
  </pre></div>
<p>下面是一个上下文在下载和取消下载功能中的应用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	cancelFuncMap sync.Map</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">// 设置状态为未取消</span></span><br><span class="line">	ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">	cancelFuncMap.Store(downloadId, cancel)</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">(downloadId <span class="type">string</span>)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">if</span> cancelFunc, ok := cancelFuncMap.Load(downloadId); ok &#123;</span><br><span class="line">		cancelFunc.(context.CancelFunc)()</span><br><span class="line">		cancelFuncMap.Delete(downloadId)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子中创建了一个可取消的context，并将创建context后返回的cancelFunc和downloadId作为key-value存储到sync.Map中。当需要取消时，根据downloadId从sync.Map中取出cancelFunc，调用<code>cancelFunc.(context.CancelFunc)()</code> 取消下载。</p>
<p><code>context.Context</code>的主要作用还是在多个goroutine组成的树中同步取消信号以减少对资源的消耗和占用。虽然也有传值的功能，但是很少用到。</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>理解协程</title>
    <url>/posts/16004.html</url>
    <content><![CDATA[<p>协程是一种轻量级的线程，也被称为用户态线程。它是由程序控制而不是操作系统内核来进行调度和管理的。</p>
<p>协程的特点包括：</p>
<ol>
<li>轻量级：协程切换和创建的开销很小，可以同时运行大量的协程</li>
<li>高效性：协程的切换是由程序控制的，无需进行用户态到内核态的切换，因此执行效率高</li>
<li>可以并发执行：多个协程可以同时执行，通过协程的切换和调度机制，实现并发的效果</li>
<li>共享资源：协程可以共享程序中的资源，如变量、文件句柄</li>
</ol>
<p>在Go语言中，协程并称为goroutine， 通过使用关键字<code>go</code> 可以创建一个新的goroutine，并在其中运行函数。</p>
<p>一个简单的异步协程的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFunc</span><span class="params">()</span></span> (rsp, <span class="type">error</span>) &#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		err = svc.task()</span><br><span class="line">		</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> rsp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码在testFunc函数中创建了一个协程，协程中执行task方法，在协程执行完成前，直接返回rsp和error。</p>
<p>如果需要等待协程执行完成后再执行其他逻辑，可以添加waitGroup进行等待。在协程开始前wg.Add(1)增加等待计数， 每个协程结束后wg.Done()减少等待计数，使用wg.Wait等待所有协程完成，并在所有协程完成之后返回success。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFunc</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup <span class="comment">// 用于控制并发的 WaitGroup</span></span><br><span class="line">	success := <span class="literal">true</span></span><br><span class="line">	<span class="keyword">for</span> a, b:= <span class="keyword">range</span> xxx&#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>) <span class="comment">// 增加一个等待计数</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(astring, b[]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> wg.Done() <span class="comment">// 在函数结束时减少等待计数</span></span><br><span class="line">			...</span><br><span class="line">		&#125;(a, b)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait() <span class="comment">// 等待所有协程完成</span></span><br><span class="line">	<span class="keyword">return</span> success</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要在协程间传递数据，可以用channel或者atomic来实现。func1将数据写入channel， func2从channel中读取数据。需要注意的是：</p>
<ol>
<li>在使用channel前，一定要先进行初始化。未初始换的channel是nil， 对它进行操作会导致panic。通常使用<code>make</code>关键字定义一个channel。</li>
<li>不要重复关闭channel。对已经关闭的channel再次关闭会导致panic。</li>
<li>不要关闭未空的channel。关闭一个未空的channel会导致其中的数据丢失。</li>
<li>避免向已关闭的channel发送、接收数据。前者会导致pannic， 后者会导致返回通道类型的零值。</li>
<li>在需要同步处理数据时，使用无缓冲channel， 在异步处理数据时，使用带缓冲的channel避免发送和接收操作之间的阻塞。</li>
<li>在协程结束后需要关闭channel。</li>
</ol>
<p>而atomic包是原子操作包，无需加锁对整数进行安全的加减、比较、读取操作。atomic包中的atomic.Value类型，也可以存储<code>c.Store(value)</code>和加载<code>c.Load()</code>任意类型的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mainFunc</span><span class="params">(xxx)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="type">string</span>, <span class="number">5</span>)</span><br><span class="line">	doneCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	count1:= <span class="type">int64</span>(<span class="number">5</span>)</span><br><span class="line">	count2:= <span class="type">int64</span>(<span class="number">5</span>)</span><br><span class="line">	wg.Add(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">go</span> func1(ch, &amp;wg, &amp;count1)</span><br><span class="line">	<span class="keyword">go</span> func2(ch, &amp;wg, &amp;count1, &amp;count2)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		wg.Wait()</span><br><span class="line">		<span class="built_in">close</span>(doneCh)</span><br><span class="line">		<span class="built_in">close</span>(ch)</span><br><span class="line">	&#125;()</span><br><span class="line">	&lt;-doneCh</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(ch <span class="keyword">chan</span>&lt;- []<span class="type">string</span>, wg *sync.WaitGroup, count1 *<span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> wg.Done()</span><br><span class="line">	ticker := time.NewTicker(<span class="number">400</span> * time.Millisecond)</span><br><span class="line">	<span class="keyword">defer</span> ticker.Stop()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">			...</span><br><span class="line">			</span><br><span class="line">			ids:= createTask(count1)</span><br><span class="line">			<span class="keyword">if</span> ids!= <span class="literal">nil</span> &#123;</span><br><span class="line">				ch&lt;- ids</span><br><span class="line">				...</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createTask</span><span class="params">(count1 *<span class="type">int64</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ids[]<span class="type">string</span></span><br><span class="line">    ...</span><br><span class="line">	<span class="keyword">for</span> _, xxx:= <span class="keyword">range</span> xxx &#123;</span><br><span class="line">		atomic.AddInt64(count1 , <span class="number">-1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ids</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span>  <span class="title">func2</span><span class="params">(ch <span class="keyword">chan</span> []<span class="type">string</span>, wg *sync.WaitGroup, count1 *<span class="type">int64</span>, count2 *<span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> wg.Done()</span><br><span class="line">	ticker := time.NewTicker(<span class="number">80</span> * time.Millisecond)</span><br><span class="line">	<span class="keyword">defer</span> ticker.Stop()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">			<span class="keyword">case</span> ids:= &lt;-ch:</span><br><span class="line">				...</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(ids) == <span class="number">0</span> &amp;&amp; *count1 == <span class="number">0</span> &amp;&amp; *count2 == <span class="number">0</span> &#123;</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line">				newIds := taskResult(ids, count2)</span><br><span class="line">				ids = <span class="built_in">append</span>(newIds, ids[end:]...)</span><br><span class="line">				ch &lt;- ids</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span>  <span class="title">taskResult</span><span class="params">(ids []<span class="type">string</span>, count2 *<span class="type">int64</span>)</span></span> (newIds []<span class="type">string</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="keyword">for</span> _, xxx := <span class="keyword">range</span> xxx &#123;</span><br><span class="line">		<span class="keyword">if</span> xxx &#123; </span><br><span class="line">			xxx</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	</span><br><span class="line">			atomic.AddInt64(count2, <span class="number">-1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">        ...</span><br><span class="line">		success := <span class="literal">true</span></span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
</search>
